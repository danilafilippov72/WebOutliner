/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Data/Elements/Compounds/Compounds/Compounds/AddAnimationMethod/AddAnimationMethod.tsx":
/*!***********************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/AddAnimationMethod/AddAnimationMethod.tsx ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddAnimationMethod": () => (/* binding */ AddAnimationMethod)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var AddAnimationMethod = /** @class */ (function () {
    function AddAnimationMethod() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = AddAnimationMethod.Form;
        this.Methods = AddAnimationMethod.Methods;
        this.Elements = AddAnimationMethod.Elements;
        this.References = AddAnimationMethod.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    AddAnimationMethod.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "AddAnimationMethod",
            _b.Border = {
                borderWidth: {
                    left: 0,
                    bottom: 0,
                    right: 3,
                    top: 0
                },
                padding: 8,
                borderType: "solid",
                borderColor: "white"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = [1, 1],
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    AddAnimationMethod.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        AddAnimationMethod.Identificator = __webpack_require__.g.count.toString();
                        if (AddAnimationMethod.InstanceIdentificator == null)
                            AddAnimationMethod.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", AddAnimationMethod.InstanceIdentificator);
                        object = AddAnimationMethod.Form.Image.ApplyImage(object);
                        if (AddAnimationMethod.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(AddAnimationMethod.Form.Image.Text));
                        Object.values(AddAnimationMethod.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(AddAnimationMethod.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    AddAnimationMethod.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    AddAnimationMethod.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return AddAnimationMethod;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/AddMethod/AddMethod.tsx":
/*!*****************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/AddMethod/AddMethod.tsx ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdddMethod": () => (/* binding */ AdddMethod)
/* harmony export */ });
/* harmony import */ var _Compounds_Method_Method__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Method/Method */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Method/Method.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var AdddMethod = /** @class */ (function () {
    function AdddMethod() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = AdddMethod.Form;
        this.Methods = AdddMethod.Methods;
        this.Elements = AdddMethod.Elements;
        this.References = AdddMethod.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    AdddMethod.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.minHeight) + "px"));
                    if (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) + "px"));
                    if (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.borderWidth) != null) {
                        if (((_x = Image.Border.borderWidth) === null || _x === void 0 ? void 0 : _x.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.padding) != null) {
                        if (((_3 = Image.Border.padding) === null || _3 === void 0 ? void 0 : _3.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "AddMethod",
            _b.Border = {
                padding: 8
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = [1, 2],
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    AdddMethod.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        AdddMethod.Identificator = __webpack_require__.g.count.toString();
                        if (AdddMethod.InstanceIdentificator == null)
                            AdddMethod.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", AdddMethod.InstanceIdentificator);
                        object = AdddMethod.Form.Image.ApplyImage(object);
                        if (AdddMethod.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(AdddMethod.Form.Image.Text));
                        Object.values(AdddMethod.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", AdddMethod.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + AdddMethod.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(AdddMethod.Elements).forEach(function (childElement) { console.log(childElement); childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = true,
                        _g),
                    _f.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("HoverIn");
                        }
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("HoverOut");
                        }
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("HoverOver");
                            document.querySelector('[identificator="' + Identificator + '"]').animate([
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                },
                                {
                                    transform: 'scale(1.2, 1.2);',
                                    boxShadow: "2px 2px 7px 4px rgba(255,255,255,0.3)"
                                },
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                }
                            ], {
                                duration: 300,
                                direction: "normal",
                                fill: "backwards"
                            });
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {
                       
                    } */
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = true,
                        _q),
                    _p.OtherMethods = [
                        function (Identificator, Properties) {
                            return __awaiter(this, void 0, void 0, function () {
                                var _a, _b;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            console.log("LeftClick", Identificator);
                                            _b = (_a = document.querySelector('[identificator="' + Identificator + '"]').parentElement.parentElement).prepend;
                                            return [4 /*yield*/, _Compounds_Method_Method__WEBPACK_IMPORTED_MODULE_0__.Method.Methods.Create()];
                                        case 1:
                                            _b.apply(_a, [(_c.sent())]);
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }
                    ],
                    _p),
                _e.LeftClickHolding = (_r = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = false,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding");
                        }
                    ],
                    _r),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    AdddMethod.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    AdddMethod.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return AdddMethod;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/AddNode/AddNode.tsx":
/*!*****************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/AddNode/AddNode.tsx ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddNode": () => (/* binding */ AddNode)
/* harmony export */ });
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_Node_Node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/Node/Node */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var AddNode = /** @class */ (function () {
    function AddNode() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = AddNode.Form;
        this.Methods = AddNode.Methods;
        this.Elements = AddNode.Elements;
        this.References = AddNode.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    AddNode.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.minHeight) + "px"));
                    if (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) + "px"));
                    if (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.borderWidth) != null) {
                        if (((_x = Image.Border.borderWidth) === null || _x === void 0 ? void 0 : _x.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.padding) != null) {
                        if (((_3 = Image.Border.padding) === null || _3 === void 0 ? void 0 : _3.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "AddMethod",
            _b.Border = {
                padding: 8
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    AddNode.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        AddNode.Identificator = __webpack_require__.g.count.toString();
                        if (AddNode.InstanceIdentificator == null)
                            AddNode.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", AddNode.InstanceIdentificator);
                        object = AddNode.Form.Image.ApplyImage(object);
                        if (AddNode.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(AddNode.Form.Image.Text));
                        Object.values(AddNode.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", AddNode.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + AddNode.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(AddNode.Elements).forEach(function (childElement) { console.log(childElement); childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = true,
                        _g),
                    _f.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("HoverIn");
                        }
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("HoverOut");
                        }
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("HoverOver");
                            document.querySelector('[identificator="' + Identificator + '"]').animate([
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                },
                                {
                                    transform: 'scale(1.2, 1.2);',
                                    boxShadow: "2px 2px 7px 4px rgba(255,255,255,0.3)"
                                },
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                }
                            ], {
                                duration: 300,
                                direction: "normal",
                                fill: "backwards"
                            });
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {
                       
                    } */
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = true,
                        _q),
                    _p.OtherMethods = [
                        function (Identificator, Properties) {
                            return __awaiter(this, void 0, void 0, function () {
                                var _a, _b;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _b = (_a = document.querySelector('[identificator="' + Identificator + '"]').parentElement.parentElement).appendChild;
                                            return [4 /*yield*/, _Compounds_Compounds_Compounds_Compounds_Node_Node__WEBPACK_IMPORTED_MODULE_0__.Node.Methods.Create()];
                                        case 1:
                                            _b.apply(_a, [(_c.sent())]);
                                            /* console.log('iopiopiopiop', document.querySelector('[identificator="' + Identificator + '"]').parentElement.getAttribute("identificator"))
                                            const object = (global.search.FindObjectByIdentificator(document.querySelector('[identificator="' + Identificator + '"]').parentElement.getAttribute("identificator"), global.Doc) as AddNode);
                                            object.Methods.InformationHandler.isListener = false; */
                                            __webpack_require__.g.Doc.Elements.Node.Methods.InformationHandler.ExtensionLackListeners();
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }
                    ],
                    _p),
                _e.LeftClickHolding = (_r = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = false,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding");
                        }
                    ],
                    _r),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    AddNode.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    AddNode.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return AddNode;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Document": () => (/* binding */ Document)
/* harmony export */ });
/* harmony import */ var _Node_Node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Node/Node */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var Document = /** @class */ (function () {
    function Document() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Document.Form;
        this.Methods = Document.Methods;
        this.Elements = Document.Elements;
        this.References = Document.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
    Document.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                ;
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _e, _g, _j, _l, _o, _q, _s, _u, _v, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (Image.Border.Margin) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_b = Image.Border) === null || _b === void 0 ? void 0 : _b.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (Image.Border.width + "px"));
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) + "px"));
                    if (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) + "px"));
                    if (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) + "px"));
                    if (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) + "px"));
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderWidth) != null) {
                        if (Image.Border.borderWidth) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.padding) != null) {
                        if (Image.Border.padding) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null)
                        element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                width: "100%",
                padding: 10,
                /* height: "1000px", */
                backgroundColor: "black"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    Document.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        Document.Identificator = __webpack_require__.g.count.toString();
                        if (Document.InstanceIdentificator == null)
                            Document.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Document.InstanceIdentificator);
                        object = Document.Form.Image.ApplyImage(object);
                        if (Document.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Document.Form.Image.Text));
                        Object.values(Document.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            Methods.Init = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a, _b, Mouse;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                __webpack_require__.g.count = 1;
                                //console.log(performance.now())
                                _b = (_a = document.body).append;
                                return [4 /*yield*/, Document.Methods.Create()];
                            case 1:
                                //console.log(performance.now())
                                _b.apply(_a, [_c.sent()]);
                                document.body.style.pointerEvents = "all";
                                document.body.onmousedown = function (event) { return Mouse.onEvent(event, Mouse.eventTypes.onMouseDown); };
                                document.body.onmouseup = function (event) { return Mouse.onEvent(event, Mouse.eventTypes.onMouseUp); };
                                document.body.onmouseenter = function (ev) { return Document.Methods.InformationHandler.Initialize({
                                    ObjectReference: "MouseHandler",
                                    Method: "HoverIn",
                                    Properties: ev,
                                    Identificator: event.target.getAttribute('identificator')
                                }); }; /*  MouseHandler.HoverIn.CurrentMethod.Run(Information.Identificator, Information.Properties); */
                                document.body.onmouseleave = function (ev) { return Document.Methods.InformationHandler.Initialize({
                                    ObjectReference: "MouseHandler",
                                    Method: "HoverOut",
                                    Properties: ev,
                                    Identificator: event.target.getAttribute('identificator')
                                }); }; /*  MouseHandler.HoverOut.CurrentMethod.Run(Information.Identificator, Information.Properties); */
                                document.body.onmousemove = function (ev) { return Document.Methods.InformationHandler.Initialize({
                                    ObjectReference: "MouseHandler",
                                    Method: "Move",
                                    Properties: ev,
                                    Identificator: event.target.getAttribute('identificator')
                                }); };
                                document.body.onmouseover = function (ev) { return Document.Methods.InformationHandler.Initialize({
                                    ObjectReference: "MouseHandler",
                                    Method: "HoverOver",
                                    Properties: ev,
                                    Identificator: event.target.getAttribute('identificator')
                                }); };
                                Mouse = /** @class */ (function () {
                                    function Mouse() {
                                    }
                                    Mouse.setOnMouseDown = function (onMouseDown) { this.onMouseDown = onMouseDown; };
                                    Mouse.setNextOnMouseUp = function (onMouseUp) { this.onMouseUp = onMouseUp; };
                                    Mouse.setTimeOut = function (event, timeInMs, afterTimingFunction) {
                                        var _this = this;
                                        clearTimeout(this.timeout);
                                        this.timeout = setTimeout(function () { return afterTimingFunction(_this.event); }, timeInMs);
                                    };
                                    Mouse.onEvent = function (event, mouseEvent /* type typesOf<T> = T[keyof T]; */) {
                                        var _this = this;
                                        console.log(mouseEvent);
                                        if (this.isActiveListener == true) {
                                            this.event = event;
                                            switch (mouseEvent) {
                                                case this.eventTypes.onMouseDown:
                                                    {
                                                        switch (this.onMouseDown) {
                                                            case this.onMouseTypes.first:
                                                                {
                                                                    this.setOnMouseDown(this.onMouseTypes.second);
                                                                    this.setTimeOut(this.event, 100, function () {
                                                                        _this.setOnMouseDown(_this.onMouseTypes.first);
                                                                        _this.setNextOnMouseUp(_this.onMouseTypes.first);
                                                                        Document.Methods.InformationHandler.Initialize({
                                                                            ObjectReference: "MouseHandler",
                                                                            Method: "LeftClickHoldingDown",
                                                                            Properties: _this.event,
                                                                            Identificator: _this.event.target.getAttribute('identificator')
                                                                        });
                                                                        /* MouseHandler.LeftClickHolding.CurrentMethod.Run(event); */
                                                                    });
                                                                }
                                                                break;
                                                            case this.onMouseTypes.second:
                                                                {
                                                                    clearTimeout(this.timeout);
                                                                    this.setOnMouseDown(this.onMouseTypes.first);
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    break;
                                                case this.eventTypes.onMouseUp:
                                                    {
                                                        switch (this.onMouseUp) {
                                                            case this.onMouseTypes.first:
                                                                {
                                                                    clearTimeout(this.timeout);
                                                                    if (Document.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.MethodIndex == 1) {
                                                                        console.log(this.eventTypes.onMouseDown, "this.onMouseDown", this.onMouseDown, this.onMouseUp);
                                                                        Document.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(0);
                                                                        Document.Methods.InformationHandler.Initialize({
                                                                            ObjectReference: "MouseHandler",
                                                                            Method: "LeftClickHoldingUp",
                                                                            Properties: this.event,
                                                                            Identificator: this.event.target.getAttribute('identificator')
                                                                        });
                                                                    }
                                                                    else {
                                                                        this.setNextOnMouseUp(this.onMouseTypes.second);
                                                                        this.setTimeOut(this.event, /* Mouse.LeftDoubleClick.LeftDoubleClickDelay */ 100, function (event) {
                                                                            _this.setOnMouseDown(_this.onMouseTypes.first);
                                                                            _this.setNextOnMouseUp(_this.onMouseTypes.first);
                                                                            Document.Methods.InformationHandler.Initialize({
                                                                                ObjectReference: "MouseHandler",
                                                                                Method: "LeftClick",
                                                                                Properties: event,
                                                                                Identificator: event.target.getAttribute('identificator')
                                                                            });
                                                                            /* MouseHandler.LeftClick.CurrentMethod.Run(event); */
                                                                        });
                                                                    }
                                                                }
                                                                break;
                                                            case this.onMouseTypes.second:
                                                                {
                                                                    clearTimeout(this.timeout);
                                                                    /* Mouse.LeftDoubleClick.Run(Information.Identificator, Information.Properties); */
                                                                    this.setNextOnMouseUp(this.onMouseTypes.first);
                                                                }
                                                                break;
                                                            case this.onMouseTypes.none:
                                                                {
                                                                    clearTimeout(this.timeout);
                                                                    this.setNextOnMouseUp(this.onMouseTypes.first);
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                    };
                                    Mouse.eventTypes = { onMouseDown: "onMouseDown", onMouseUp: "onMouseUp", onMouseIn: "onMouseIn" };
                                    Mouse.isActiveListener = true;
                                    Mouse.onMouseTypes = { first: "first", second: "second", none: "none" };
                                    Mouse.onMouseDown = Mouse.onMouseTypes.first;
                                    Mouse.onMouseUp = Mouse.onMouseTypes.first;
                                    Mouse.timeout = setTimeout(function () { }, 100);
                                    return Mouse;
                                }());
                                Document.Elements.Node.Methods.InformationHandler.ExtensionLackListeners();
                                return [2 /*return*/];
                        }
                    });
                });
            };
            ;
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        return __awaiter(this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                MouseHandler[Information.Method].CurrentMethod.Run(Information);
                                return [2 /*return*/];
                            });
                        });
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                        function (event, Identificator) {
                            document.elementFromPoint(event.x, event.y).dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "HoverIn",
                                    Identificator: Identificator
                                }
                            }));
                        }
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                        function (event, Identificator) {
                            document.elementFromPoint(event.x, event.y).dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "HoverOut",
                                    Identificator: Identificator
                                }
                            }));
                        }
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (event, Identificator) {
                            document.elementFromPoint(event.x, event.y).dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "HoverOver",
                                    Identificator: Identificator
                                }
                            }));
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = true,
                        _o),
                    _m.OtherMethods = [
                        function (event, Identificator) {
                            document.elementFromPoint(event.x, event.y).dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "Move",
                                    Identificator: Identificator,
                                    Properties: {
                                        Coordinates: { x: event.x, y: event.y }
                                    }
                                }
                            }));
                        },
                        function (event, Identificator) {
                            _d.Initialize({
                                ObjectReference: "ElementPaddingTop",
                                Identificator: __webpack_require__.g.objectMovement,
                                Method: "MouseCoordinates",
                                Properties: {
                                    Coordinates: {
                                        x: event.x,
                                        y: event.y
                                    }
                                }
                            });
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = true,
                        _q),
                    _p.OtherMethods = [
                        function (event, Identificator) {
                            /* console.log(document.elementFromPoint(event.x, event.y), new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "LeftClick",
                                    Identificator: Identificator
                                }
                            })) */
                            document.elementFromPoint(event.x, event.y).dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "LeftClick",
                                    Identificator: Identificator
                                }
                            }));
                        }
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (event, Identificator) {
                            document.elementFromPoint(event.x, event.y).dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "LeftClickHoldingDown",
                                    Identificator: Identificator,
                                    Properties: {
                                        Coordinates: { x: event.x, y: event.y }
                                    }
                                }
                            }));
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (event, Identificator) {
                            document.querySelector('[identificator="' + __webpack_require__.g.objectMovement + '"]').dispatchEvent(new CustomEvent('Outline', {
                                detail: {
                                    ObjectReference: "MouseHandler",
                                    Method: "LeftClickHoldingUp",
                                    Identificator: Identificator,
                                    Properties: {
                                        Coordinates: { x: event.x, y: event.y }
                                    }
                                }
                            }));
                        }
                    ],
                    _t),
                _e),
            _d.ElementPaddingTop = (_v = /** @class */ (function () {
                    function ElementPaddingTop() {
                    }
                    ElementPaddingTop.Initialize = function (Information) {
                        return __awaiter(this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                ElementPaddingTop[Information.Method].CurrentMethod.Run(Information);
                                return [2 /*return*/];
                            });
                        });
                    };
                    return ElementPaddingTop;
                }()),
                _v.MouseCoordinates = (_w = /** @class */ (function () {
                        function MouseCoordinates() {
                        }
                        return MouseCoordinates;
                    }()),
                    _w.CurrentMethod = (_x = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Information) {
                                if (CurrentMethod.Response)
                                    _w.OtherMethods[CurrentMethod.MethodIndex](Information.Properties, Information.Identificator);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _x.MethodIndex = 0,
                        _x.Response = true,
                        _x),
                    _w.OtherMethods = [
                        function (Properties, Identificator) {
                            var object = __webpack_require__.g.search.FindObjectByIdentificator(__webpack_require__.g.objectMovement, Document);
                            object.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = true;
                            object.Methods.InformationHandler.Initialize({
                                ObjectReference: "MouseHandler",
                                Identificator: __webpack_require__.g.objectMovement,
                                Method: "Move",
                                Properties: { Coordinates: Properties.Coordinates }
                            });
                        }
                    ],
                    _w),
                _v),
            _d),
        _c);
    Document.Elements = (_y = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _y.Node = _Node_Node__WEBPACK_IMPORTED_MODULE_0__.Node,
        _y);
    Document.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Document;
}());

var Search = /** @class */ (function () {
    function Search() {
    }
    Search.FindObjectByIdentificator = function (Identificator, object) {
        //console.log("Need to find: ", Identificator);
        /* console.log(Identificator, (object as typeof Document).name,   (object as typeof Document).Identificator); */
        if (Number(object.Identificator) == Number(Identificator))
            return object;
        else {
            /*   console.log(Object.values(object.Elements)
                  .find(childObject => {
                      console.log(Number(Identificator) <= Number((childObject as typeof Document)));
                      Number(Identificator) <= Number((childObject as typeof Document))
                  })); */
            /* console.log("Need to find: ", Identificator);
            console.log(Object.values(object.Elements).sort((childObject1,childObject2) => Number((childObject1 as typeof Document).Identificator) -  Number((childObject2 as typeof Document).Identificator))
                .forEach((childObject, index) => {
                    console.table([(childObject as typeof Document).name, (childObject as typeof Document).Identificator]);
                //console.log("    ", (childObject as typeof Document).name, " Identificator: ", (childObject as typeof Document).Identificator);
                 (Number(Identificator) >= Number((childObject as typeof Document).Identificator
                    || (Object.values(object.Elements).length > index + 1
                        && Number((Object.values(object.Elements)[index + 1] as typeof Document).Identificator) > Number(Identificator))
                ))
            })) */
            return Search.FindObjectByIdentificator(Identificator, Object.values(object.Elements).sort()
                .find(function (childObject, index) {
                /*  console.log("    ", (childObject as typeof Document).name, " Identificator: ", (childObject as typeof Document).Identificator);
                 console.log("          ", (Number(Identificator) >= Number((childObject as typeof Document).Identificator))); */
                return (Number(Identificator) >= Number(childObject.Identificator
                    || (Object.values(object.Elements).length > index + 1
                        && Number(Object.values(object.Elements)[index + 1].Identificator) > Number(Identificator))));
            }));
        }
        /*
         .forEach((childObject, index) => {
         //console.log(Identificator, (childObject as typeof Document).name, );
         //console.log("    ", (childObject as typeof Document).name, " Identificator: ", (childObject as typeof Document).Identificator);
         
         if ((childObject as typeof Document).Identificator == Identificator) {
             console.log((childObject as typeof Document).Form.Image.gridRowsWidth, Identificator)
             return childObject
         }
         else {
             if ((childObject as typeof Document).Identificator)
                 return this.FindObjectByIdentificator(Identificator, childObject)
         }
     }); */
    };
    return Search;
}());
globalThis.Doc = Document;
globalThis.search = Search;
Document.Methods.Init();
document.body.style.backgroundColor = "#000000";


/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx":
/*!***************************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Node": () => (/* binding */ Node)
/* harmony export */ });
/* harmony import */ var _Outline_Outline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Outline/Outline */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Outline/Outline.tsx");
/* harmony import */ var _ObjectNode_ObjectNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ObjectNode/ObjectNode */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectNode/ObjectNode.tsx");
/* harmony import */ var _Node_Node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Node/Node */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx");
/* harmony import */ var _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../OutlineVertical/OutlineVertical */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




var Node = /** @class */ (function () {
    function Node() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Node.Form;
        this.Methods = Node.Methods;
        this.Elements = Node.Elements;
        this.References = Node.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    Node.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) {
                            return gridTemplate += '"' + temp + '"' + " " +
                                (typeof Image.gridRowsWidth[index] == "string" ? Image.gridRowsWidth[index].toString() : Image.gridRowsWidth[index].toString() + "px") + "\n";
                        });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (temp) { return gridTemplate += (typeof temp == "string" ? temp.toString() : temp + "px") + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    /*  if (Image?.gridRowsWidth != null) {
                         var gridTemplate = '';
                         Image.gridRowsWidth.forEach(temp => gridTemplate += temp + " ");
                         element.style.gridTemplateRows = gridTemplate;
                     }
                     if (Image?.gridColumnsWidth != null) {
                         var gridTemplate = '';
                         Image.gridColumnsWidth.forEach(temp => gridTemplate += (typeof temp == "string" ? temp as string : temp + "px") + " ");
                         element.style.gridTemplateColumns = gridTemplate;
                     }
      */
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                height: "100%",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.gridTemplate = ["a b", "c d"],
            _b.gridRowsWidth = ["auto", "auto"],
            _b.gridColumnsWidth = [60, "auto"],
            _b.gridArea /* = [1,1] */ = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    Node.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        Node.Identificator = __webpack_require__.g.count.toString();
                        if (Node.InstanceIdentificator == null)
                            Node.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Node.InstanceIdentificator);
                        object = Node.Form.Image.ApplyImage(object);
                        if (Node.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Node.Form.Image.Text));
                        Object.values(Node.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(Node.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    Node.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.Outline = _Outline_Outline__WEBPACK_IMPORTED_MODULE_0__.Outline,
        _r.OutlineVertical = _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_3__.OutlineVertical,
        _r.ObjectNode = _ObjectNode_ObjectNode__WEBPACK_IMPORTED_MODULE_1__.ObjectNode,
        _r.ChildNode = _Node_Node__WEBPACK_IMPORTED_MODULE_2__.Node,
        _r);
    Node.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Node;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectNode/ObjectNode.tsx":
/*!***************************************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectNode/ObjectNode.tsx ***!
  \***************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectNode": () => (/* binding */ ObjectNode)
/* harmony export */ });
/* harmony import */ var _FormNode_FormNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../FormNode/FormNode */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormNode/FormNode.tsx");
/* harmony import */ var _MethodsNode_MethodsNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../MethodsNode/MethodsNode */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/MethodsNode/MethodsNode.tsx");
/* harmony import */ var _ObjectNodeText_ObjectNodeText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../ObjectNodeText/ObjectNodeText */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectNodeText/ObjectNodeText.tsx");
/* harmony import */ var _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../OutlineVertical/OutlineVertical */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




var ObjectNode = /** @class */ (function () {
    function ObjectNode() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ObjectNode.Form;
        this.Methods = ObjectNode.Methods;
        this.Elements = ObjectNode.Elements;
        this.References = ObjectNode.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    ObjectNode.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                height: "100%",
                borderWidth: 2,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplate = '"a a" auto "c d" auto "c e" auto / 30px auto',
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ObjectNode.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        ObjectNode.Identificator = __webpack_require__.g.count.toString();
                        if (ObjectNode.InstanceIdentificator == null)
                            ObjectNode.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ObjectNode.InstanceIdentificator);
                        object = ObjectNode.Form.Image.ApplyImage(object);
                        if (ObjectNode.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ObjectNode.Form.Image.Text));
                        Object.values(ObjectNode.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ObjectNode.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ObjectNode.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.ObjectNodeText = _ObjectNodeText_ObjectNodeText__WEBPACK_IMPORTED_MODULE_2__.ObjectNodeText,
        _r.OutlineVertical = _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_3__.OutlineVertical,
        _r.FormNode = _FormNode_FormNode__WEBPACK_IMPORTED_MODULE_0__.FormNode,
        _r.MethodsNode = _MethodsNode_MethodsNode__WEBPACK_IMPORTED_MODULE_1__.MethodsNode,
        _r);
    ObjectNode.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ObjectNode;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Outline/Outline.tsx":
/*!*************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Outline/Outline.tsx ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Outline": () => (/* binding */ Outline)
/* harmony export */ });
/* harmony import */ var _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../OutlineHor/OutlineHor */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx");
/* harmony import */ var _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../OutlineVertical/OutlineVertical */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx");
/* harmony import */ var _Router_Router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Router/Router */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Router/Router.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var Outline = /** @class */ (function () {
    function Outline() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Outline.Form;
        this.Methods = Outline.Methods;
        this.Elements = Outline.Elements;
        this.References = Outline.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    Outline.Elements = (_a = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _a.OutlineHor = _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_0__.OutlineHor,
        _a.Router = _Router_Router__WEBPACK_IMPORTED_MODULE_2__.Router,
        _a.OutlineVertical = _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_1__.OutlineVertical,
        _a);
    Outline.Form = (_b = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _b.Image = (_c = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _f, _h, _k, _m, _p, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_f = Image.Border) === null || _f === void 0 ? void 0 : _f.minWidth) + "px"));
                    if (((_h = Image.Border) === null || _h === void 0 ? void 0 : _h.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_k = Image.Border) === null || _k === void 0 ? void 0 : _k.maxWidth) + "px"));
                    if (((_m = Image.Border) === null || _m === void 0 ? void 0 : _m.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_p = Image.Border) === null || _p === void 0 ? void 0 : _p.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) {
                            return gridTemplate += '"' + temp + '"' + " " +
                                (typeof Image.gridRowsWidth[index] == "string" ? Image.gridRowsWidth[index].toString() : Image.gridRowsWidth[index].toString() + "px") + "\n";
                        });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (temp) { return gridTemplate += (typeof temp == "string" ? temp.toString() : temp + "px") + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    //if (Image?.gridTemplate != null) element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _c.Border = {
                /* width: 10,
                height: 10, */
                width: "100%",
                height: "100%",
                /* borderColor: "hsl(0deg 0% 50%)" */
            },
            _c.Display = "grid",
            _c.Positioning = {
                row: "start",
                column: "center"
            },
            _c.gridTemplate = ["a b q", "d c q"],
            _c.gridRowsWidth = [Outline.Elements.Router.Form.Image.Border.height, "auto"],
            _c.gridColumnsWidth = ["auto", Outline.Elements.Router.Form.Image.Border.width, "auto"],
            _c.gridArea = "a",
            _c),
        _b.States = [],
        _b.Dependencies = [],
        _b.StatesTimeInformation = [],
        _b);
    Outline.Methods = (_d = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Outline.InstanceIdentificator);
                        object = Outline.Form.Image.ApplyImage(object);
                        if (Outline.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Outline.Form.Image.Text));
                        Object.values(Outline.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _d.InformationHandler = (_e = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(Outline.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _e.MouseHandler = (_f = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _f.HoverIn = (_g = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _g.CurrentMethod = (_h = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _g.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _h.MethodIndex = 0,
                        _h.Response = false,
                        _h),
                    _g.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _g),
                _f.HoverOut = (_j = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _j.CurrentMethod = (_k = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _j.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _k.MethodIndex = 0,
                        _k.Response = false,
                        _k),
                    _j.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _j),
                _f.HoverOver = (_l = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _l.CurrentMethod = (_m = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _l.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _m.MethodIndex = 0,
                        _m.Response = false,
                        _m),
                    _l.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _l),
                _f.LeftClick = (_o = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _o.CurrentMethod = (_p = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _o.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _p.MethodIndex = 0,
                        _p.Response = false,
                        _p),
                    _o.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _o),
                _f.LeftClickHolding = (_q = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _q.CurrentMethod = (_r = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _q.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _r.MethodIndex = 0,
                        _r.Response = false,
                        _r),
                    _q.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _q),
                _f),
            _e),
        _d);
    Outline.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Outline;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormNode/FormNode.tsx":
/*!*****************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormNode/FormNode.tsx ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormNode": () => (/* binding */ FormNode)
/* harmony export */ });
/* harmony import */ var _FormBox_FormBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../FormBox/FormBox */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormBox/FormBox.tsx");
/* harmony import */ var _FormText_FormText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../FormText/FormText */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormText/FormText.tsx");
/* harmony import */ var _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../OutlineHor/OutlineHor */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var FormNode = /** @class */ (function () {
    function FormNode() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = FormNode.Form;
        this.Methods = FormNode.Methods;
        this.Elements = FormNode.Elements;
        this.References = FormNode.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    FormNode.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string")
                            element.style.gridArea = Image.gridArea;
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplate = ' "a b" auto "c d" auto / 30px auto ',
            _b.Display = "grid",
            _b.gridArea = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    FormNode.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        FormNode.Identificator = __webpack_require__.g.count.toString();
                        if (FormNode.InstanceIdentificator == null)
                            FormNode.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", FormNode.InstanceIdentificator);
                        object = FormNode.Form.Image.ApplyImage(object);
                        if (FormNode.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(FormNode.Form.Image.Text));
                        Object.values(FormNode.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(FormNode.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    FormNode.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.FormText = _FormText_FormText__WEBPACK_IMPORTED_MODULE_1__.FormText,
        _r.FormBox = _FormBox_FormBox__WEBPACK_IMPORTED_MODULE_0__.FormBox,
        _r.OutlineHor = _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__.OutlineHor,
        _r);
    FormNode.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return FormNode;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/MethodsNode/MethodsNode.tsx":
/*!***********************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/MethodsNode/MethodsNode.tsx ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MethodsNode": () => (/* binding */ MethodsNode)
/* harmony export */ });
/* harmony import */ var _ObjectMethodBox_ObjectMethodBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ObjectMethodBox/ObjectMethodBox */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectMethodBox/ObjectMethodBox.tsx");
/* harmony import */ var _ObjectMethodsText_ObjectMethodsText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ObjectMethodsText/ObjectMethodsText */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectMethodsText/ObjectMethodsText.tsx");
/* harmony import */ var _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../OutlineHor/OutlineHor */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var MethodsNode = /** @class */ (function () {
    function MethodsNode() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = MethodsNode.Form;
        this.Methods = MethodsNode.Methods;
        this.Elements = MethodsNode.Elements;
        this.References = MethodsNode.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    MethodsNode.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string")
                            element.style.gridArea = Image.gridArea;
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                Margin: {
                    left: 0,
                    right: 0,
                    bottom: 10,
                    top: 0
                }
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplate = ' "a b" auto "c d" auto / 30px auto ',
            _b.Display = "grid",
            _b.gridArea = "e",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    MethodsNode.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        MethodsNode.Identificator = __webpack_require__.g.count.toString();
                        if (MethodsNode.InstanceIdentificator == null)
                            MethodsNode.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", MethodsNode.InstanceIdentificator);
                        object = MethodsNode.Form.Image.ApplyImage(object);
                        if (MethodsNode.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(MethodsNode.Form.Image.Text));
                        Object.values(MethodsNode.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(MethodsNode.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    MethodsNode.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.ObjectMethodsText = _ObjectMethodsText_ObjectMethodsText__WEBPACK_IMPORTED_MODULE_1__.ObjectMethodsText,
        _r.ObjectMethodBox = _ObjectMethodBox_ObjectMethodBox__WEBPACK_IMPORTED_MODULE_0__.ObjectMethodBox,
        _r.OutlineHor = _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__.OutlineHor,
        _r);
    MethodsNode.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return MethodsNode;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx":
/*!*********************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Node/Node.tsx ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Node": () => (/* binding */ Node)
/* harmony export */ });
/* harmony import */ var _AddNode_AddNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../AddNode/AddNode */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/AddNode/AddNode.tsx");
/* harmony import */ var _Compounds_Outline_Outline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Compounds/Outline/Outline */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Outline/Outline.tsx");
/* harmony import */ var _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OutlineVertical/OutlineVertical */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var Node = /** @class */ (function () {
    function Node() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Node.Form;
        this.Methods = Node.Methods;
        this.Elements = Node.Elements;
        this.References = Node.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    Node.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) {
                            return gridTemplate += '"' + temp + '"' + " " +
                                (typeof Image.gridRowsWidth[index] == "string" ? Image.gridRowsWidth[index].toString() : Image.gridRowsWidth[index].toString() + "px") + "\n";
                        });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (temp) { return gridTemplate += (typeof temp == "string" ? temp.toString() : temp + "px") + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    /*  if (Image?.gridRowsWidth != null) {
                         var gridTemplate = '';
                         Image.gridRowsWidth.forEach(temp => gridTemplate += temp + " ");
                         element.style.gridTemplateRows = gridTemplate;
                     }
                     if (Image?.gridColumnsWidth != null) {
                         var gridTemplate = '';
                         Image.gridColumnsWidth.forEach(temp => gridTemplate += (typeof temp == "string" ? temp as string : temp + "px") + " ");
                         element.style.gridTemplateColumns = gridTemplate;
                     }
      */
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                height: "100%",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.gridTemplate = ["a b", "c d"],
            _b.gridRowsWidth = ["auto", "auto"],
            _b.gridColumnsWidth = [60, "auto"],
            _b.gridArea /* = [1,1] */ = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    Node.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        Node.Identificator = __webpack_require__.g.count.toString();
                        if (Node.InstanceIdentificator == null)
                            Node.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Node.InstanceIdentificator);
                        object = Node.Form.Image.ApplyImage(object);
                        if (Node.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Node.Form.Image.Text));
                        Object.values(Node.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(Node.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {
 
                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    Node.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.Outline = _Compounds_Outline_Outline__WEBPACK_IMPORTED_MODULE_1__.Outline,
        _r.OutlineVertical = _OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_2__.OutlineVertical,
        _r.AddNode = _AddNode_AddNode__WEBPACK_IMPORTED_MODULE_0__.AddNode,
        _r);
    Node.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Node;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectNodeText/ObjectNodeText.tsx":
/*!*****************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectNodeText/ObjectNodeText.tsx ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectNodeText": () => (/* binding */ ObjectNodeText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ObjectNodeText = /** @class */ (function () {
    function ObjectNodeText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ObjectNodeText.Form;
        this.Methods = ObjectNodeText.Methods;
        this.Elements = ObjectNodeText.Elements;
        this.References = ObjectNodeText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    ObjectNodeText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "ObjectNodeText",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "a",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ObjectNodeText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                var _a;
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_b) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ObjectNodeText.InstanceIdentificator);
                        object = ObjectNodeText.Form.Image.ApplyImage(object);
                        if (((_a = ObjectNodeText.Form.Image) === null || _a === void 0 ? void 0 : _a.Text) != null)
                            object.appendChild(document.createTextNode(ObjectNodeText.Form.Image.Text));
                        Object.values(ObjectNodeText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ObjectNodeText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ObjectNodeText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ObjectNodeText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ObjectNodeText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx":
/*!*******************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutlineVertical": () => (/* binding */ OutlineVertical)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var OutlineVertical = /** @class */ (function () {
    function OutlineVertical() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OutlineVertical.Form;
        this.Methods = OutlineVertical.Methods;
        this.Elements = OutlineVertical.Elements;
        this.References = OutlineVertical.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    OutlineVertical.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: {
                    left: 0,
                    bottom: 0,
                    right: 3,
                    top: 0
                },
                height: "100%",
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
            },
            _b.Positioning = {
                row: "end",
                column: "start"
            },
            _b.gridArea = "c",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OutlineVertical.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OutlineVertical.InstanceIdentificator);
                        object = OutlineVertical.Form.Image.ApplyImage(object);
                        if (OutlineVertical.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OutlineVertical.Form.Image.Text));
                        Object.values(OutlineVertical.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OutlineVertical.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OutlineVertical.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    OutlineVertical.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OutlineVertical;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Router/Router.tsx":
/*!*************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Router/Router.tsx ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Router": () => (/* binding */ Router)
/* harmony export */ });
/* harmony import */ var _HorizontalLine_HorizontalLine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../HorizontalLine/HorizontalLine */ "./Data/Elements/Compounds/Compounds/HorizontalLine/HorizontalLine.tsx");
/* harmony import */ var _VerticalLine_VerticalLine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../VerticalLine/VerticalLine */ "./Data/Elements/Compounds/Compounds/VerticalLine/VerticalLine.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var Router = /** @class */ (function () {
    function Router() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Router.Form;
        this.Methods = Router.Methods;
        this.Elements = Router.Elements;
        this.References = Router.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    Router.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) {
                            return gridTemplate += '"' + temp + '"' + " " +
                                (typeof Image.gridRowsWidth[index] == "string" ? Image.gridRowsWidth[index].toString() : Image.gridRowsWidth[index].toString() + "px") + "\n";
                        });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (temp) { return gridTemplate += (typeof temp == "string" ? temp.toString() : temp + "px") + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                width: 20,
                height: 20,
                borderWidth: 2,
                borderRadius: 3,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
            },
            _b.Display = "grid",
            _b.gridTemplate = ["a"],
            _b.gridRowsWidth = ["auto"],
            _b.gridColumnsWidth = ["auto"],
            _b.gridArea = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    Router.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Router.InstanceIdentificator);
                        object = Router.Form.Image.ApplyImage(object);
                        if (Router.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Router.Form.Image.Text));
                        Object.values(Router.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(Router.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    Router.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.HorizontalLine = _HorizontalLine_HorizontalLine__WEBPACK_IMPORTED_MODULE_0__.HorizontalLine,
        _r.VerticalLine = _VerticalLine_VerticalLine__WEBPACK_IMPORTED_MODULE_1__.VerticalLine,
        _r);
    Router.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Router;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormBox/FormBox.tsx":
/*!*****************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormBox/FormBox.tsx ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormBox": () => (/* binding */ FormBox)
/* harmony export */ });
/* harmony import */ var _WindowForm_WindowForm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../WindowForm/WindowForm */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/WindowForm/WindowForm.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var FormBox = /** @class */ (function () {
    function FormBox() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = FormBox.Form;
        this.Methods = FormBox.Methods;
        this.Elements = FormBox.Elements;
        this.References = FormBox.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    FormBox.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 3,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    FormBox.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        FormBox.Identificator = __webpack_require__.g.count.toString();
                        if (FormBox.InstanceIdentificator == null)
                            FormBox.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", FormBox.InstanceIdentificator);
                        object = FormBox.Form.Image.ApplyImage(object);
                        if (FormBox.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(FormBox.Form.Image.Text));
                        Object.values(FormBox.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(FormBox.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    FormBox.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.WindowForm = _WindowForm_WindowForm__WEBPACK_IMPORTED_MODULE_0__.WindowForm,
        _r);
    FormBox.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return FormBox;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormText/FormText.tsx":
/*!*******************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/FormText/FormText.tsx ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormText": () => (/* binding */ FormText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var FormText = /** @class */ (function () {
    function FormText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = FormText.Form;
        this.Methods = FormText.Methods;
        this.Elements = FormText.Elements;
        this.References = FormText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    FormText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    element.style.color = "white";
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "Form",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    FormText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        FormText.Identificator = __webpack_require__.g.count.toString();
                        if (FormText.InstanceIdentificator == null)
                            FormText.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", FormText.InstanceIdentificator);
                        object = FormText.Form.Image.ApplyImage(object);
                        if (FormText.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(FormText.Form.Image.Text));
                        Object.values(FormText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(FormText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    FormText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    FormText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return FormText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectMethodBox/ObjectMethodBox.tsx":
/*!*********************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectMethodBox/ObjectMethodBox.tsx ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectMethodBox": () => (/* binding */ ObjectMethodBox)
/* harmony export */ });
/* harmony import */ var _InformationHandlers_InformationHandlers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../InformationHandlers/InformationHandlers */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/InformationHandlers/InformationHandlers.tsx");
/* harmony import */ var _OtherMethods_OtherMethods__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../OtherMethods/OtherMethods */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/OtherMethods/OtherMethods.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var ObjectMethodBox = /** @class */ (function () {
    function ObjectMethodBox() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ObjectMethodBox.Form;
        this.Methods = ObjectMethodBox.Methods;
        this.Elements = ObjectMethodBox.Elements;
        this.References = ObjectMethodBox.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    ObjectMethodBox.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 3,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ObjectMethodBox.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        ObjectMethodBox.Identificator = __webpack_require__.g.count.toString();
                        if (ObjectMethodBox.InstanceIdentificator == null)
                            ObjectMethodBox.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ObjectMethodBox.InstanceIdentificator);
                        object = ObjectMethodBox.Form.Image.ApplyImage(object);
                        if (ObjectMethodBox.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ObjectMethodBox.Form.Image.Text));
                        Object.values(ObjectMethodBox.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ObjectMethodBox.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ObjectMethodBox.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.InformationHandlers = _InformationHandlers_InformationHandlers__WEBPACK_IMPORTED_MODULE_0__.InformationHandlers,
        _r.OtherMethods = _OtherMethods_OtherMethods__WEBPACK_IMPORTED_MODULE_1__.OtherMethods,
        _r);
    ObjectMethodBox.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ObjectMethodBox;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectMethodsText/ObjectMethodsText.tsx":
/*!*************************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/ObjectMethodsText/ObjectMethodsText.tsx ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectMethodsText": () => (/* binding */ ObjectMethodsText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ObjectMethodsText = /** @class */ (function () {
    function ObjectMethodsText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ObjectMethodsText.Form;
        this.Methods = ObjectMethodsText.Methods;
        this.Elements = ObjectMethodsText.Elements;
        this.References = ObjectMethodsText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    ObjectMethodsText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    element.style.color = "white";
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "Methods",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ObjectMethodsText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        ObjectMethodsText.Identificator = __webpack_require__.g.count.toString();
                        if (ObjectMethodsText.InstanceIdentificator == null)
                            ObjectMethodsText.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ObjectMethodsText.InstanceIdentificator);
                        object = ObjectMethodsText.Form.Image.ApplyImage(object);
                        if (ObjectMethodsText.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ObjectMethodsText.Form.Image.Text));
                        Object.values(ObjectMethodsText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ObjectMethodsText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ObjectMethodsText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ObjectMethodsText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ObjectMethodsText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx":
/*!***********************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutlineHor": () => (/* binding */ OutlineHor)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var OutlineHor = /** @class */ (function () {
    function OutlineHor() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OutlineHor.Form;
        this.Methods = OutlineHor.Methods;
        this.Elements = OutlineHor.Elements;
        this.References = OutlineHor.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    OutlineHor.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: {
                    left: 0,
                    bottom: 0,
                    right: 0,
                    top: 3
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "a",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OutlineHor.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OutlineHor.InstanceIdentificator);
                        object = OutlineHor.Form.Image.ApplyImage(object);
                        if (OutlineHor.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OutlineHor.Form.Image.Text));
                        Object.values(OutlineHor.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OutlineHor.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function () {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function () {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OutlineHor.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    OutlineHor.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OutlineHor;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx":
/*!*********************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutlineVertical": () => (/* binding */ OutlineVertical)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var OutlineVertical = /** @class */ (function () {
    function OutlineVertical() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OutlineVertical.Form;
        this.Methods = OutlineVertical.Methods;
        this.Elements = OutlineVertical.Elements;
        this.References = OutlineVertical.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    OutlineVertical.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: {
                    left: 0,
                    bottom: 0,
                    right: 3,
                    top: 0
                },
                height: "100%",
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
            },
            _b.Positioning = {
                row: "center",
                column: "start"
            },
            _b.gridArea = "c",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OutlineVertical.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OutlineVertical.InstanceIdentificator);
                        object = OutlineVertical.Form.Image.ApplyImage(object);
                        if (OutlineVertical.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OutlineVertical.Form.Image.Text));
                        Object.values(OutlineVertical.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OutlineVertical.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OutlineVertical.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    OutlineVertical.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OutlineVertical;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/WindowForm/WindowForm.tsx":
/*!*************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/WindowForm/WindowForm.tsx ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WindowForm": () => (/* binding */ WindowForm)
/* harmony export */ });
/* harmony import */ var _ElementCreator_ElementCreator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ElementCreator/ElementCreator */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/ElementCreator/ElementCreator.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var WindowForm = /** @class */ (function () {
    function WindowForm() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = WindowForm.Form;
        this.Methods = WindowForm.Methods;
        this.Elements = WindowForm.Elements;
        this.References = WindowForm.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    WindowForm.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 3,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 40
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    WindowForm.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        WindowForm.Identificator = __webpack_require__.g.count.toString();
                        if (WindowForm.InstanceIdentificator == null)
                            WindowForm.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", WindowForm.InstanceIdentificator);
                        object = WindowForm.Form.Image.ApplyImage(object);
                        if (WindowForm.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(WindowForm.Form.Image.Text));
                        Object.values(WindowForm.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(WindowForm.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    WindowForm.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.ElementCreator = _ElementCreator_ElementCreator__WEBPACK_IMPORTED_MODULE_0__.ElementCreator,
        _r);
    WindowForm.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return WindowForm;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/ElementCreator/ElementCreator.tsx":
/*!***********************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/ElementCreator/ElementCreator.tsx ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementCreator": () => (/* binding */ ElementCreator)
/* harmony export */ });
/* harmony import */ var _ElementAddInner_ElementAddInner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ElementAddInner/ElementAddInner */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementAddInner/ElementAddInner.tsx");
/* harmony import */ var _ElementImage_ElementImage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ElementImage/ElementImage */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementImage/ElementImage.tsx");
/* harmony import */ var _ElementPaddingLeft_ElementPaddingLeft__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ElementPaddingLeft/ElementPaddingLeft */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementPaddingLeft/ElementPaddingLeft.tsx");
/* harmony import */ var _ElementPaddingTop_ElementPaddingTop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ElementPaddingTop/ElementPaddingTop */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementPaddingTop/ElementPaddingTop.tsx");
/* harmony import */ var _ElementWidthRight_ElementWidthRight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ElementWidthRight/ElementWidthRight */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementWidthRight/ElementWidthRight.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};





var ElementCreator = /** @class */ (function () {
    function ElementCreator() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ElementCreator.Form;
        this.Methods = ElementCreator.Methods;
        this.Elements = ElementCreator.Elements;
        this.References = ElementCreator.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    ElementCreator.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    /*  if (Image?.gridTemplateColumns != null) element.style.gridTemplateColumns = Image.gridTemplateColumns; */
                    /*  if (Image?.gridTemplate != null) {
                         var gridTemplate = '';
     
                         Image.gridTemplate.forEach((temp, index) => gridTemplate += '"' + temp + '"' + " " + Image.gridRowsWidth[index] + " ")
                         gridTemplate += " / ";
                         Image.gridColumnsWidth.forEach(col => gridTemplate += col + " ")
                         element.style.gridTemplate = gridTemplate;
                     }
      */
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    element.style.placeItems = "center";
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                /*  borderWidth: 3,
                 borderType: "solid",
                 borderColor: "hsl(0deg 0% 50%)", */
                borderRadius: 10,
                Margin: 10,
                padding: 3,
                width: "100%",
                height: "100%",
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "center",
                column: "center"
            },
            _b.gridTemplate = ["a b b b c", "d e e e f", "d g h i f", "d j j j f", "k l l l m"],
            _b.gridRowsWidth = [0, "auto", "auto", "auto", "auto"],
            _b.gridColumnsWidth = ["0%", "auto", "auto", "auto", "0%"],
            _b.gridArea = "e" /* ;2 / 1 / 2/ 6 */,
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ElementCreator.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        ElementCreator.Identificator = __webpack_require__.g.count.toString();
                        if (ElementCreator.InstanceIdentificator == null)
                            ElementCreator.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ElementCreator.InstanceIdentificator);
                        object = ElementCreator.Form.Image.ApplyImage(object);
                        if (ElementCreator.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ElementCreator.Form.Image.Text));
                        Object.values(ElementCreator.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ElementCreator.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ElementCreator.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.ElementWidthRight = _ElementWidthRight_ElementWidthRight__WEBPACK_IMPORTED_MODULE_4__.ElementWidthRight,
        _r.ElementPaddingTop = _ElementPaddingTop_ElementPaddingTop__WEBPACK_IMPORTED_MODULE_3__.ElementPaddingTop,
        _r.ElementPaddingLeft = _ElementPaddingLeft_ElementPaddingLeft__WEBPACK_IMPORTED_MODULE_2__.ElementPaddingLeft,
        _r.ElementImage = _ElementImage_ElementImage__WEBPACK_IMPORTED_MODULE_1__.ElementImage,
        _r.ElementAddInner = _ElementAddInner_ElementAddInner__WEBPACK_IMPORTED_MODULE_0__.ElementAddInner,
        _r);
    ElementCreator.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ElementCreator;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/InformationHandlers/InformationHandlers.tsx":
/*!*********************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/InformationHandlers/InformationHandlers.tsx ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InformationHandlers": () => (/* binding */ InformationHandlers)
/* harmony export */ });
/* harmony import */ var _InformationHandlersText_InformationHandlersText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../InformationHandlersText/InformationHandlersText */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/InformationHandlersText/InformationHandlersText.tsx");
/* harmony import */ var _ObjectReferenceHandlersNode_ObjectReferenceHandlersNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ObjectReferenceHandlersNode/ObjectReferenceHandlersNode */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ObjectReferenceHandlersNode/ObjectReferenceHandlersNode.tsx");
/* harmony import */ var _Compounds_Compounds_Compounds_OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var InformationHandlers = /** @class */ (function () {
    function InformationHandlers() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = InformationHandlers.Form;
        this.Methods = InformationHandlers.Methods;
        this.Elements = InformationHandlers.Elements;
        this.References = InformationHandlers.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    InformationHandlers.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 2,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplate = '"b b" fit-content(1px) "c d" 1fr / 30px 1fr',
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    InformationHandlers.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        InformationHandlers.Identificator = __webpack_require__.g.count.toString();
                        if (InformationHandlers.InstanceIdentificator == null)
                            InformationHandlers.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", InformationHandlers.InstanceIdentificator);
                        object = InformationHandlers.Form.Image.ApplyImage(object);
                        if (InformationHandlers.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(InformationHandlers.Form.Image.Text));
                        Object.values(InformationHandlers.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(InformationHandlers.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    InformationHandlers.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.InformationHandlersText = _InformationHandlersText_InformationHandlersText__WEBPACK_IMPORTED_MODULE_0__.InformationHandlersText,
        _r.ObjectReferenceHandlers = _ObjectReferenceHandlersNode_ObjectReferenceHandlersNode__WEBPACK_IMPORTED_MODULE_1__.ObjectReferenceHandlersNode,
        _r.OutlineVertical = _Compounds_Compounds_Compounds_OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_2__.OutlineVertical,
        _r);
    InformationHandlers.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return InformationHandlers;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/OtherMethods/OtherMethods.tsx":
/*!*******************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/OtherMethods/OtherMethods.tsx ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OtherMethods": () => (/* binding */ OtherMethods)
/* harmony export */ });
/* harmony import */ var _SpaceMethods_SpaceMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../SpaceMethods/SpaceMethods */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var OtherMethods = /** @class */ (function () {
    function OtherMethods() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OtherMethods.Form;
        this.Methods = OtherMethods.Methods;
        this.Elements = OtherMethods.Elements;
        this.References = OtherMethods.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    OtherMethods.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 2,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d",
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OtherMethods.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        OtherMethods.Identificator = __webpack_require__.g.count.toString();
                        if (OtherMethods.InstanceIdentificator == null)
                            OtherMethods.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OtherMethods.InstanceIdentificator);
                        object = OtherMethods.Form.Image.ApplyImage(object);
                        if (OtherMethods.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OtherMethods.Form.Image.Text));
                        Object.values(OtherMethods.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OtherMethods.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OtherMethods.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.SpaceMethods = _SpaceMethods_SpaceMethods__WEBPACK_IMPORTED_MODULE_0__.SpaceMethods,
        _r);
    OtherMethods.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OtherMethods;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementAddInner/ElementAddInner.tsx":
/*!***************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementAddInner/ElementAddInner.tsx ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementAddInner": () => (/* binding */ ElementAddInner)
/* harmony export */ });
/* harmony import */ var _Plus_Plus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Plus/Plus */ "./Data/Elements/Compounds/Compounds/Compounds/Plus/Plus.tsx");
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx");
/* harmony import */ var _Compounds_ElementCreator_ElementCreator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Compounds/ElementCreator/ElementCreator */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/ElementCreator/ElementCreator.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var ElementAddInner = /** @class */ (function () {
    function ElementAddInner() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ElementAddInner.Form;
        this.Methods = ElementAddInner.Methods;
        this.Elements = ElementAddInner.Elements;
        this.References = ElementAddInner.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    ElementAddInner.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) + "px"));
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderWidth) != null) {
                        if (((_z = Image.Border.borderWidth) === null || _z === void 0 ? void 0 : _z.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.padding) != null) {
                        if (((_5 = Image.Border.padding) === null || _5 === void 0 ? void 0 : _5.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                /* height: 40, */
                /* borderWidth: {
                    left: 0,
                    right: 0,
                    bottom: 2,
                    top: 2
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                width: "10%" */
            },
            _b.Positioning = {
                row: "center",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "e",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ElementAddInner.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (ElementAddInner.InstanceIdentificator == null)
                            ElementAddInner.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ElementAddInner.InstanceIdentificator);
                        object = ElementAddInner.Form.Image.ApplyImage(object);
                        if (ElementAddInner.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ElementAddInner.Form.Image.Text));
                        Object.values(ElementAddInner.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", ElementAddInner.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + ElementAddInner.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(ElementAddInner.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("fdgdfg");
                            document.querySelector('[identificator="' + Identificator + '"]').animate([
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                },
                                {
                                    transform: 'scale(1.2, 1.2);',
                                    boxShadow: "2px 2px 7px 4px rgba(255,255,255,0.3)"
                                },
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                }
                            ], {
                                duration: 300,
                                direction: "normal",
                                fill: "backwards"
                            });
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_1__.Document);
                                object_1.Form.Image.gridRowsWidth[0] += -(__webpack_require__.g.Coordinates.y - Properties.Coordinates.y) /*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)) */;
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = true,
                        _q),
                    _p.OtherMethods = [
                        function (Identificator, Properties) {
                            return __awaiter(this, void 0, void 0, function () {
                                var imageObject, _a, _b;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                            //imageObject.style.opacity = "0";
                                            _b = (_a = imageObject).appendChild;
                                            return [4 /*yield*/, _Compounds_ElementCreator_ElementCreator__WEBPACK_IMPORTED_MODULE_2__.ElementCreator.Methods.Create()];
                                        case 1:
                                            //imageObject.style.opacity = "0";
                                            _b.apply(_a, [_c.sent()]);
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            ElementAddInner.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    ElementAddInner.Elements = (_v = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _v.Plus = _Plus_Plus__WEBPACK_IMPORTED_MODULE_0__.Plus,
        _v);
    ElementAddInner.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ElementAddInner;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementImage/ElementImage.tsx":
/*!*********************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementImage/ElementImage.tsx ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementImage": () => (/* binding */ ElementImage)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ElementImage = /** @class */ (function () {
    function ElementImage() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ElementImage.Form;
        this.Methods = ElementImage.Methods;
        this.Elements = ElementImage.Elements;
        this.References = ElementImage.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    ElementImage.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 1,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                borderRadius: 10,
                padding: 5,
                width: "100%",
                height: "100%"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "e",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ElementImage.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ElementImage.InstanceIdentificator);
                        object = ElementImage.Form.Image.ApplyImage(object);
                        if (ElementImage.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ElementImage.Form.Image.Text));
                        Object.values(ElementImage.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ElementImage.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ElementImage.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ElementImage.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ElementImage;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementPaddingLeft/ElementPaddingLeft.tsx":
/*!*********************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementPaddingLeft/ElementPaddingLeft.tsx ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementPaddingLeft": () => (/* binding */ ElementPaddingLeft)
/* harmony export */ });
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var ElementPaddingLeft = /** @class */ (function () {
    function ElementPaddingLeft() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ElementPaddingLeft.Form;
        this.Methods = ElementPaddingLeft.Methods;
        this.Elements = ElementPaddingLeft.Elements;
        this.References = ElementPaddingLeft.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    ElementPaddingLeft.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_c = Image.Border.Margin) === null || _c === void 0 ? void 0 : _c.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.width) + "px"));
                    if (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.minWidth) + "px"));
                    if (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.maxWidth) + "px"));
                    if (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.height) + "px"));
                    if (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.minHeight) + "px"));
                    if (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.maxHeight) + "px"));
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderWidth) != null) {
                        if (((_0 = Image.Border.borderWidth) === null || _0 === void 0 ? void 0 : _0.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_5 = Image.Border) === null || _5 === void 0 ? void 0 : _5.padding) != null) {
                        if (((_6 = Image.Border.padding) === null || _6 === void 0 ? void 0 : _6.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                height: "75%",
                width: 40,
                borderWidth: {
                    left: 2,
                    right: 2,
                    bottom: 0,
                    top: 0
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.position = "relative",
            _b.positionOffset = {
                left: -_b.Border.width - 5,
                top: 0
            },
            _b.gridArea /* = [1,1] */ = "e",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ElementPaddingLeft.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (ElementPaddingLeft.InstanceIdentificator == null)
                            ElementPaddingLeft.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ElementPaddingLeft.InstanceIdentificator);
                        object = ElementPaddingLeft.Form.Image.ApplyImage(object);
                        if (ElementPaddingLeft.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ElementPaddingLeft.Form.Image.Text));
                        Object.values(ElementPaddingLeft.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _c = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _c.apply(_a, [_d.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", ElementPaddingLeft.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + ElementPaddingLeft.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(ElementPaddingLeft.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                            document.querySelector('[identificator="' + Identificator + '"]').animate([
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                },
                                {
                                    transform: 'scale(1.2, 1.2);',
                                    boxShadow: "2px 2px 7px 4px rgba(255,255,255,0.3)"
                                },
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                }
                            ], {
                                duration: 300,
                                direction: "normal",
                                fill: "backwards"
                            });
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_0__.Document);
                                /* (Properties.Coordinates.x - imageObject.getBoundingClientRect().x) / imageObject.clientWidth */
                                object_1.Form.Image.gridColumnsWidth[0] = ((Properties.Coordinates.x - imageObject.getBoundingClientRect().left) / imageObject.clientWidth * 100).toString() + "%";
                                /*  (Number((object.Form.Image.gridColumnsWidth[0] as string).slice(0, (object.Form.Image.gridColumnsWidth[0] as string).indexOf("%") ))
                                     - (global.Coordinates.x - Properties.Coordinates.x)).toString() + "%"/*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)); */
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            ElementPaddingLeft.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    ElementPaddingLeft.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ElementPaddingLeft.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ElementPaddingLeft;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementPaddingTop/ElementPaddingTop.tsx":
/*!*******************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementPaddingTop/ElementPaddingTop.tsx ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementPaddingTop": () => (/* binding */ ElementPaddingTop)
/* harmony export */ });
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var ElementPaddingTop = /** @class */ (function () {
    function ElementPaddingTop() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ElementPaddingTop.Form;
        this.Methods = ElementPaddingTop.Methods;
        this.Elements = ElementPaddingTop.Elements;
        this.References = ElementPaddingTop.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    ElementPaddingTop.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_c = Image.Border.Margin) === null || _c === void 0 ? void 0 : _c.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.width) + "px"));
                    if (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.minWidth) + "px"));
                    if (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.maxWidth) + "px"));
                    if (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.height) + "px"));
                    if (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.minHeight) + "px"));
                    if (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.maxHeight) + "px"));
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderWidth) != null) {
                        if (((_0 = Image.Border.borderWidth) === null || _0 === void 0 ? void 0 : _0.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_5 = Image.Border) === null || _5 === void 0 ? void 0 : _5.padding) != null) {
                        if (((_6 = Image.Border.padding) === null || _6 === void 0 ? void 0 : _6.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                height: 40,
                borderWidth: {
                    left: 0,
                    right: 0,
                    bottom: 2,
                    top: 2
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                width: "10%"
            },
            _b.Positioning = {
                row: "center",
                column: "start"
            },
            _b.position = "relative",
            _b.positionOffset = {
                left: 0,
                top: -_b.Border.height - 5
            },
            _b.gridArea /* = [1,1] */ = "e",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ElementPaddingTop.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (ElementPaddingTop.InstanceIdentificator == null)
                            ElementPaddingTop.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ElementPaddingTop.InstanceIdentificator);
                        object = ElementPaddingTop.Form.Image.ApplyImage(object);
                        if (ElementPaddingTop.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ElementPaddingTop.Form.Image.Text));
                        Object.values(ElementPaddingTop.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _c = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _c.apply(_a, [_d.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", ElementPaddingTop.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + ElementPaddingTop.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(ElementPaddingTop.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                            document.querySelector('[identificator="' + Identificator + '"]').animate([
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                },
                                {
                                    transform: 'scale(1.2, 1.2);',
                                    boxShadow: "2px 2px 7px 4px rgba(255,255,255,0.3)"
                                },
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                }
                            ], {
                                duration: 300,
                                direction: "normal",
                                fill: "backwards"
                            });
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_0__.Document);
                                object_1.Form.Image.gridRowsWidth[0] += -(__webpack_require__.g.Coordinates.y - Properties.Coordinates.y) /*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)) */;
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            ElementPaddingTop.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    ElementPaddingTop.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ElementPaddingTop.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ElementPaddingTop;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementWidthRight/ElementWidthRight.tsx":
/*!*******************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/ElementWidthRight/ElementWidthRight.tsx ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ElementWidthRight": () => (/* binding */ ElementWidthRight)
/* harmony export */ });
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var ElementWidthRight = /** @class */ (function () {
    function ElementWidthRight() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ElementWidthRight.Form;
        this.Methods = ElementWidthRight.Methods;
        this.Elements = ElementWidthRight.Elements;
        this.References = ElementWidthRight.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    ElementWidthRight.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_c = Image.Border.Margin) === null || _c === void 0 ? void 0 : _c.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.width) + "px"));
                    if (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.minWidth) + "px"));
                    if (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.maxWidth) + "px"));
                    if (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.height) + "px"));
                    if (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.minHeight) + "px"));
                    if (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.maxHeight) + "px"));
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderWidth) != null) {
                        if (((_0 = Image.Border.borderWidth) === null || _0 === void 0 ? void 0 : _0.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_5 = Image.Border) === null || _5 === void 0 ? void 0 : _5.padding) != null) {
                        if (((_6 = Image.Border.padding) === null || _6 === void 0 ? void 0 : _6.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                height: "75%",
                width: 20,
                borderWidth: {
                    left: 4,
                    right: 4,
                    bottom: 0,
                    top: 0
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)"
            },
            _b.Positioning = {
                row: "end",
                column: "center"
            },
            _b.position = "relative",
            _b.positionOffset = {
                left: _b.Border.width / 2,
                top: 0
            },
            _b.gridArea /* = [1,1] */ = "e",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ElementWidthRight.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (ElementWidthRight.InstanceIdentificator == null)
                            ElementWidthRight.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ElementWidthRight.InstanceIdentificator);
                        object = ElementWidthRight.Form.Image.ApplyImage(object);
                        if (ElementWidthRight.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ElementWidthRight.Form.Image.Text));
                        Object.values(ElementWidthRight.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _c = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _c.apply(_a, [_d.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", ElementWidthRight.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + ElementWidthRight.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(ElementWidthRight.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                            document.querySelector('[identificator="' + Identificator + '"]').animate([
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                },
                                {
                                    transform: 'scale(1.2, 1.2);',
                                    boxShadow: "2px 2px 7px 4px rgba(255,255,255,0.3)"
                                },
                                {
                                    transform: 'scale(1, 1)',
                                    boxShadow: "2px 2px 7px 4px rgba(0,0,0,0)"
                                }
                            ], {
                                duration: 300,
                                direction: "normal",
                                fill: "backwards"
                            });
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), _Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Compounds_Document_Document__WEBPACK_IMPORTED_MODULE_0__.Document);
                                /* (Properties.Coordinates.x - imageObject.getBoundingClientRect().x) / imageObject.clientWidth */
                                object_1.Form.Image.gridColumnsWidth[4] = (-(Properties.Coordinates.x - imageObject.getBoundingClientRect().right) / imageObject.clientWidth * 100).toString() + "%";
                                /*  (Number((object.Form.Image.gridColumnsWidth[0] as string).slice(0, (object.Form.Image.gridColumnsWidth[0] as string).indexOf("%") ))
                                     - (global.Coordinates.x - Properties.Coordinates.x)).toString() + "%"/*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)); */
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            ElementWidthRight.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    ElementWidthRight.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ElementWidthRight.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ElementWidthRight;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/InformationHandlersText/InformationHandlersText.tsx":
/*!*******************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/InformationHandlersText/InformationHandlersText.tsx ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InformationHandlersText": () => (/* binding */ InformationHandlersText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var InformationHandlersText = /** @class */ (function () {
    function InformationHandlersText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = InformationHandlersText.Form;
        this.Methods = InformationHandlersText.Methods;
        this.Elements = InformationHandlersText.Elements;
        this.References = InformationHandlersText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    InformationHandlersText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "Information Handlers",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    InformationHandlersText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        InformationHandlersText.Identificator = __webpack_require__.g.count.toString();
                        if (InformationHandlersText.InstanceIdentificator == null)
                            InformationHandlersText.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", InformationHandlersText.InstanceIdentificator);
                        object = InformationHandlersText.Form.Image.ApplyImage(object);
                        if (InformationHandlersText.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(InformationHandlersText.Form.Image.Text));
                        Object.values(InformationHandlersText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(InformationHandlersText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex]();
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    InformationHandlersText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    InformationHandlersText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return InformationHandlersText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Method/Method.tsx":
/*!*********************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/Method/Method.tsx ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Method": () => (/* binding */ Method)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var Method = /** @class */ (function () {
    function Method() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Method.Form;
        this.Methods = Method.Methods;
        this.Elements = Method.Elements;
        this.References = Method.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    Method.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                ;
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null)
                        element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "Method!",
            _b.Border = {
                borderWidth: 1,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                borderRadius: 10,
                backgroundColor: "#0b0c0d",
                Margin: {
                    left: 0,
                    right: 0,
                    bottom: 10,
                    top: 0,
                },
                padding: 10
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplateColumns = "20% 80%",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    Method.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Method.InstanceIdentificator);
                        object = Method.Form.Image.ApplyImage(object);
                        if (Method.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Method.Form.Image.Text));
                        Object.values(Method.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(Method.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    Method.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    Method.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Method;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/ObjectReferenceHandlersNode/ObjectReferenceHandlersNode.tsx":
/*!***************************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/ObjectReferenceHandlersNode/ObjectReferenceHandlersNode.tsx ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectReferenceHandlersNode": () => (/* binding */ ObjectReferenceHandlersNode)
/* harmony export */ });
/* harmony import */ var _InformationNode_InformationNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../InformationNode/InformationNode */ "./Data/Elements/Compounds/Compounds/Compounds/InformationNode/InformationNode.tsx");
/* harmony import */ var _ObjectReferenceHandlerText_ObjectReferenceHandlerText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ObjectReferenceHandlerText/ObjectReferenceHandlerText */ "./Data/Elements/Compounds/Compounds/Compounds/ObjectReferenceHandlerText/ObjectReferenceHandlerText.tsx");
/* harmony import */ var _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../OutlineHor/OutlineHor */ "./Data/Elements/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx");
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineVertical/OutlineVertical.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




var ObjectReferenceHandlersNode = /** @class */ (function () {
    function ObjectReferenceHandlersNode() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ObjectReferenceHandlersNode.Form;
        this.Methods = ObjectReferenceHandlersNode.Methods;
        this.Elements = ObjectReferenceHandlersNode.Elements;
        this.References = ObjectReferenceHandlersNode.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    ObjectReferenceHandlersNode.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                padding: {
                    left: 0,
                    right: 10,
                    bottom: 10,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplate = '"a b b" fit-content(1px) "q c d" 1fr /  30px 30px 1fr',
            _b.gridArea /* = [1,1] */ = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ObjectReferenceHandlersNode.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ObjectReferenceHandlersNode.InstanceIdentificator);
                        object = ObjectReferenceHandlersNode.Form.Image.ApplyImage(object);
                        if (ObjectReferenceHandlersNode.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(ObjectReferenceHandlersNode.Form.Image.Text));
                        Object.values(ObjectReferenceHandlersNode.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ObjectReferenceHandlersNode.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ObjectReferenceHandlersNode.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.OutlineHor = _OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__.OutlineHor,
        _r.OutlineVertical = _Compounds_Compounds_Compounds_Compounds_OutlineVertical_OutlineVertical__WEBPACK_IMPORTED_MODULE_3__.OutlineVertical,
        _r.ObjectReferenceHandlerText = _ObjectReferenceHandlerText_ObjectReferenceHandlerText__WEBPACK_IMPORTED_MODULE_1__.ObjectReferenceHandlerText,
        _r.InformationNode = _InformationNode_InformationNode__WEBPACK_IMPORTED_MODULE_0__.InformationNode,
        _r);
    ObjectReferenceHandlersNode.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ObjectReferenceHandlersNode;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods.tsx":
/*!*********************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods.tsx ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpaceMethods": () => (/* binding */ SpaceMethods)
/* harmony export */ });
/* harmony import */ var _AddAnimationMethod_AddAnimationMethod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../AddAnimationMethod/AddAnimationMethod */ "./Data/Elements/Compounds/Compounds/Compounds/AddAnimationMethod/AddAnimationMethod.tsx");
/* harmony import */ var _AddMethod_AddMethod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../AddMethod/AddMethod */ "./Data/Elements/Compounds/Compounds/Compounds/AddMethod/AddMethod.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var SpaceMethods = /** @class */ (function () {
    function SpaceMethods() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = SpaceMethods.Form;
        this.Methods = SpaceMethods.Methods;
        this.Elements = SpaceMethods.Elements;
        this.References = SpaceMethods.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    SpaceMethods.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 1,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                borderRadius: 10,
                backgroundColor: "#0b0c0d"
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplateColumns = "20% 80%",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    SpaceMethods.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        console.log("SpaceMethods Create", __webpack_require__.g.count);
                        SpaceMethods.Identificator = __webpack_require__.g.count.toString();
                        if (SpaceMethods.InstanceIdentificator == null)
                            SpaceMethods.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", SpaceMethods.InstanceIdentificator);
                        object = SpaceMethods.Form.Image.ApplyImage(object);
                        if (SpaceMethods.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(SpaceMethods.Form.Image.Text));
                        Object.values(SpaceMethods.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    console.log("SpaceMethods, ", SpaceMethods.Identificator);
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(SpaceMethods.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    SpaceMethods.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.AdddMethod = _AddMethod_AddMethod__WEBPACK_IMPORTED_MODULE_1__.AdddMethod,
        _r.AddAnimationMethod = _AddAnimationMethod_AddAnimationMethod__WEBPACK_IMPORTED_MODULE_0__.AddAnimationMethod,
        _r);
    SpaceMethods.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return SpaceMethods;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/InformationNode/InformationNode.tsx":
/*!*****************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/InformationNode/InformationNode.tsx ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InformationNode": () => (/* binding */ InformationNode)
/* harmony export */ });
/* harmony import */ var _InformationBox_InformationBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../InformationBox/InformationBox */ "./Data/Elements/Compounds/Compounds/InformationBox/InformationBox.tsx");
/* harmony import */ var _InformationBoxText_InformationBoxText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../InformationBoxText/InformationBoxText */ "./Data/Elements/Compounds/Compounds/InformationBoxText/InformationBoxText.tsx");
/* harmony import */ var _Compounds_Compounds_Compounds_Compounds_OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var InformationNode = /** @class */ (function () {
    function InformationNode() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = InformationNode.Form;
        this.Methods = InformationNode.Methods;
        this.Elements = InformationNode.Elements;
        this.References = InformationNode.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    InformationNode.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                padding: {
                    left: 0,
                    right: 10,
                    bottom: 10,
                    top: 10
                },
            },
            _b.Display = "grid",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridTemplate = '"a b" fit-content(1px) "c d" 1fr / 30px 1fr',
            _b.gridArea /* = [1,1] */ = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    InformationNode.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", InformationNode.InstanceIdentificator);
                        object = InformationNode.Form.Image.ApplyImage(object);
                        if (InformationNode.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(InformationNode.Form.Image.Text));
                        Object.values(InformationNode.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(InformationNode.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    InformationNode.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.InformationBox = _InformationBox_InformationBox__WEBPACK_IMPORTED_MODULE_0__.InformationBox,
        _r.InformationBoxText = _InformationBoxText_InformationBoxText__WEBPACK_IMPORTED_MODULE_1__.InformationBoxText,
        _r.OutlineHor = _Compounds_Compounds_Compounds_Compounds_OutlineHor_OutlineHor__WEBPACK_IMPORTED_MODULE_2__.OutlineHor,
        _r);
    InformationNode.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return InformationNode;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/ObjectReferenceHandlerText/ObjectReferenceHandlerText.tsx":
/*!***************************************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/ObjectReferenceHandlerText/ObjectReferenceHandlerText.tsx ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectReferenceHandlerText": () => (/* binding */ ObjectReferenceHandlerText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ObjectReferenceHandlerText = /** @class */ (function () {
    function ObjectReferenceHandlerText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = ObjectReferenceHandlerText.Form;
        this.Methods = ObjectReferenceHandlerText.Methods;
        this.Elements = ObjectReferenceHandlerText.Elements;
        this.References = ObjectReferenceHandlerText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    ObjectReferenceHandlerText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == typeof String ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == typeof String ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == typeof String ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == typeof String ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == typeof String ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "ObjectReferenceHandler",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    ObjectReferenceHandlerText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                var _a;
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_b) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", ObjectReferenceHandlerText.InstanceIdentificator);
                        object = ObjectReferenceHandlerText.Form.Image.ApplyImage(object);
                        if (((_a = ObjectReferenceHandlerText.Form.Image) === null || _a === void 0 ? void 0 : _a.Text) != null)
                            object.appendChild(document.createTextNode(ObjectReferenceHandlerText.Form.Image.Text));
                        Object.values(ObjectReferenceHandlerText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(ObjectReferenceHandlerText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    ObjectReferenceHandlerText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    ObjectReferenceHandlerText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return ObjectReferenceHandlerText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx":
/*!*******************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/OutlineHor/OutlineHor.tsx ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutlineHor": () => (/* binding */ OutlineHor)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var OutlineHor = /** @class */ (function () {
    function OutlineHor() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OutlineHor.Form;
        this.Methods = OutlineHor.Methods;
        this.Elements = OutlineHor.Elements;
        this.References = OutlineHor.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    OutlineHor.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == typeof String ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: {
                    left: 0,
                    bottom: 0,
                    right: 0,
                    top: 3
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea = "a",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OutlineHor.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OutlineHor.InstanceIdentificator);
                        object = OutlineHor.Form.Image.ApplyImage(object);
                        if (OutlineHor.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OutlineHor.Form.Image.Text));
                        Object.values(OutlineHor.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OutlineHor.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OutlineHor.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    OutlineHor.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OutlineHor;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/Compounds/Plus/Plus.tsx":
/*!*******************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/Compounds/Plus/Plus.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Plus": () => (/* binding */ Plus)
/* harmony export */ });
/* harmony import */ var _HorizontalLine_HorizontalLine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../HorizontalLine/HorizontalLine */ "./Data/Elements/Compounds/Compounds/HorizontalLine/HorizontalLine.tsx");
/* harmony import */ var _VerticalLine_VerticalLine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../VerticalLine/VerticalLine */ "./Data/Elements/Compounds/Compounds/VerticalLine/VerticalLine.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var Plus = /** @class */ (function () {
    function Plus() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = Plus.Form;
        this.Methods = Plus.Methods;
        this.Elements = Plus.Elements;
        this.References = Plus.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    Plus.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) + "px"));
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderWidth) != null) {
                        if (((_z = Image.Border.borderWidth) === null || _z === void 0 ? void 0 : _z.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.padding) != null) {
                        if (((_5 = Image.Border.padding) === null || _5 === void 0 ? void 0 : _5.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) {
                            return gridTemplate += '"' + temp + '"' + " " +
                                (typeof Image.gridRowsWidth[index] == "string" ? Image.gridRowsWidth[index].toString() : Image.gridRowsWidth[index].toString() + "px") + "\n";
                        });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (temp) { return gridTemplate += (typeof temp == "string" ? temp.toString() : temp + "px") + " "; });
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    element.style.pointerEvents = "none";
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                /* height: 40, */
                width: 20,
                height: 20
                /* borderWidth: {
                    left: 0,
                    right: 0,
                    bottom: 2,
                    top: 2
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)",
                width: "10%" */
            },
            _b.Display = "grid",
            _b.gridTemplate = ["a"],
            _b.gridRowsWidth = ["auto"],
            _b.gridColumnsWidth = ["auto"],
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    Plus.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (Plus.InstanceIdentificator == null)
                            Plus.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", Plus.InstanceIdentificator);
                        object = Plus.Form.Image.ApplyImage(object);
                        if (Plus.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(Plus.Form.Image.Text));
                        Object.values(Plus.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", Plus.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + Plus.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(Plus.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), Document);
                                object_1.Form.Image.gridRowsWidth[0] += -(__webpack_require__.g.Coordinates.y - Properties.Coordinates.y) /*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)) */;
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            Plus.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    Plus.Elements = (_v = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _v.HorizontalLine = _HorizontalLine_HorizontalLine__WEBPACK_IMPORTED_MODULE_0__.HorizontalLine,
        _v.VerticalLine = _VerticalLine_VerticalLine__WEBPACK_IMPORTED_MODULE_1__.VerticalLine,
        _v);
    Plus.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return Plus;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/HorizontalLine/HorizontalLine.tsx":
/*!*****************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/HorizontalLine/HorizontalLine.tsx ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HorizontalLine": () => (/* binding */ HorizontalLine)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var HorizontalLine = /** @class */ (function () {
    function HorizontalLine() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = HorizontalLine.Form;
        this.Methods = HorizontalLine.Methods;
        this.Elements = HorizontalLine.Elements;
        this.References = HorizontalLine.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    HorizontalLine.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) + "px"));
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderWidth) != null) {
                        if (((_z = Image.Border.borderWidth) === null || _z === void 0 ? void 0 : _z.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.padding) != null) {
                        if (((_5 = Image.Border.padding) === null || _5 === void 0 ? void 0 : _5.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        console.log(gridTemplate);
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                width: "100%",
                borderWidth: {
                    left: 0,
                    right: 0,
                    bottom: 0,
                    top: 2
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)"
            },
            _b.Positioning = {
                row: "center",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "a",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    HorizontalLine.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (HorizontalLine.InstanceIdentificator == null)
                            HorizontalLine.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", HorizontalLine.InstanceIdentificator);
                        object = HorizontalLine.Form.Image.ApplyImage(object);
                        if (HorizontalLine.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(HorizontalLine.Form.Image.Text));
                        Object.values(HorizontalLine.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", HorizontalLine.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + HorizontalLine.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(HorizontalLine.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), Document);
                                object_1.Form.Image.gridRowsWidth[0] += -(__webpack_require__.g.Coordinates.y - Properties.Coordinates.y) /*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)) */;
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            HorizontalLine.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    HorizontalLine.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    HorizontalLine.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return HorizontalLine;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/InformationBoxText/InformationBoxText.tsx":
/*!*************************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/InformationBoxText/InformationBoxText.tsx ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InformationBoxText": () => (/* binding */ InformationBoxText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var InformationBoxText = /** @class */ (function () {
    function InformationBoxText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = InformationBoxText.Form;
        this.Methods = InformationBoxText.Methods;
        this.Elements = InformationBoxText.Elements;
        this.References = InformationBoxText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    InformationBoxText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "InformationBoxText",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "b",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    InformationBoxText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                var _a;
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_b) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", InformationBoxText.InstanceIdentificator);
                        object = InformationBoxText.Form.Image.ApplyImage(object);
                        if (((_a = InformationBoxText.Form.Image) === null || _a === void 0 ? void 0 : _a.Text) != null)
                            object.appendChild(document.createTextNode(InformationBoxText.Form.Image.Text));
                        Object.values(InformationBoxText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                    InformationHandler.MouseHandler.Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(InformationBoxText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    InformationBoxText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    InformationBoxText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return InformationBoxText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/InformationBox/InformationBox.tsx":
/*!*****************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/InformationBox/InformationBox.tsx ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InformationBox": () => (/* binding */ InformationBox)
/* harmony export */ });
/* harmony import */ var _CurrentMethod_CurrentMethod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CurrentMethod/CurrentMethod */ "./Data/Elements/Compounds/CurrentMethod/CurrentMethod.tsx");
/* harmony import */ var _CurrentMethodText_CurrentMethodText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CurrentMethodText/CurrentMethodText */ "./Data/Elements/Compounds/CurrentMethodText/CurrentMethodText.tsx");
/* harmony import */ var _OtherMethods_OtherMethods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../OtherMethods/OtherMethods */ "./Data/Elements/Compounds/OtherMethods/OtherMethods.tsx");
/* harmony import */ var _OtherMethodsText_OtherMethodsText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../OtherMethodsText/OtherMethodsText */ "./Data/Elements/Compounds/OtherMethodsText/OtherMethodsText.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




var InformationBox = /** @class */ (function () {
    function InformationBox() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = InformationBox.Form;
        this.Methods = InformationBox.Methods;
        this.Elements = InformationBox.Elements;
        this.References = InformationBox.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    InformationBox.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 2,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "d",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    InformationBox.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", InformationBox.InstanceIdentificator);
                        object = InformationBox.Form.Image.ApplyImage(object);
                        if (InformationBox.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(InformationBox.Form.Image.Text));
                        Object.values(InformationBox.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(InformationBox.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    InformationBox.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.CurrentMethodText = _CurrentMethodText_CurrentMethodText__WEBPACK_IMPORTED_MODULE_1__.CurrentMethodText,
        _r.CurrentMethod = _CurrentMethod_CurrentMethod__WEBPACK_IMPORTED_MODULE_0__.CurrentMethod,
        _r.OtherMethodsText = _OtherMethodsText_OtherMethodsText__WEBPACK_IMPORTED_MODULE_3__.OtherMethodsText,
        _r.OtherMethods = _OtherMethods_OtherMethods__WEBPACK_IMPORTED_MODULE_2__.OtherMethods,
        _r);
    InformationBox.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return InformationBox;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/Compounds/VerticalLine/VerticalLine.tsx":
/*!*************************************************************************!*\
  !*** ./Data/Elements/Compounds/Compounds/VerticalLine/VerticalLine.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VerticalLine": () => (/* binding */ VerticalLine)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var VerticalLine = /** @class */ (function () {
    function VerticalLine() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = VerticalLine.Form;
        this.Methods = VerticalLine.Methods;
        this.Elements = VerticalLine.Elements;
        this.References = VerticalLine.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    VerticalLine.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _s, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.minHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_w = Image.Border) === null || _w === void 0 ? void 0 : _w.maxHeight) + "px"));
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.boxSizing) != null)
                        element.style.boxSizing = Image.Border.boxSizing;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderWidth) != null) {
                        if (((_z = Image.Border.borderWidth) === null || _z === void 0 ? void 0 : _z.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_2 = Image.Border) === null || _2 === void 0 ? void 0 : _2.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_3 = Image.Border) === null || _3 === void 0 ? void 0 : _3.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_4 = Image.Border) === null || _4 === void 0 ? void 0 : _4.padding) != null) {
                        if (((_5 = Image.Border.padding) === null || _5 === void 0 ? void 0 : _5.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null) {
                        var gridTemplate = '';
                        Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof Image.gridRowsWidth[index] == "number" ? Image.gridRowsWidth[index] + "px" : Image.gridRowsWidth[index]) + " "; });
                        gridTemplate += " / ";
                        Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += col + " "; });
                        console.log(gridTemplate);
                        element.style.gridTemplate = gridTemplate;
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.alignSelf = Image.Positioning.column;
                        element.style.justifySelf = Image.Positioning.row;
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                boxSizing: "border-box",
                height: "100%",
                borderWidth: {
                    left: 0,
                    right: 2,
                    bottom: 0,
                    top: 0
                },
                borderType: "solid",
                borderColor: "hsl(0deg 0% 40%)"
            },
            _b.Positioning = {
                row: "center",
                column: "center"
            },
            _b.gridArea /* = [1,1] */ = "a",
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    VerticalLine.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (VerticalLine.InstanceIdentificator == null)
                            VerticalLine.InstanceIdentificator = count.toString();
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", VerticalLine.InstanceIdentificator);
                        object = VerticalLine.Form.Image.ApplyImage(object);
                        if (VerticalLine.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(VerticalLine.Form.Image.Text));
                        Object.values(VerticalLine.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                InformationHandler.ExtensionLackListeners = function () {
                    if (InformationHandler.isListener == false) {
                        console.log("ExtensionLackListeners", VerticalLine.Identificator);
                        document.querySelectorAll('[instanceidentificator="' + VerticalLine.InstanceIdentificator + '"]')
                            .forEach(function (element) { return element.addEventListener("Outline", function (event) { InformationHandler.Initialize(event.detail); }); });
                        InformationHandler.isListener = true;
                    }
                    Object.values(VerticalLine.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = true,
                        _l),
                    _k.OtherMethods = [
                        function (Identificator, Properties) {
                        }
                    ],
                    _k),
                _e.Move = (_m = /** @class */ (function () {
                        function Move() {
                        }
                        return Move;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                        function (Identificator, Properties) {
                            var _a;
                            Identificator = __webpack_require__.g.objectMovement;
                            if ((__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.Coordinates) != null) {
                                var imageObject = document.querySelector('[identificator="' + Identificator + '"]').parentElement;
                                var object_1 = __webpack_require__.g.search.FindObjectByIdentificator(imageObject.getAttribute("identificator"), Document);
                                object_1.Form.Image.gridRowsWidth[0] += -(__webpack_require__.g.Coordinates.y - Properties.Coordinates.y) /*  * (0.01 * Math.abs(global.Coordinates.x - Properties.Coordinates.x)) */;
                                if (((_a = object_1.Form.Image) === null || _a === void 0 ? void 0 : _a.gridTemplate) != null) {
                                    var gridTemplate = '';
                                    object_1.Form.Image.gridTemplate.forEach(function (temp, index) { return gridTemplate += '"' + temp + '"' + " " + (typeof object_1.Form.Image.gridRowsWidth[index] == "number" ? object_1.Form.Image.gridRowsWidth[index] + "px" : object_1.Form.Image.gridRowsWidth[index]) + " "; });
                                    gridTemplate += " / ";
                                    object_1.Form.Image.gridColumnsWidth.forEach(function (col) { return gridTemplate += (typeof col == "string" ? col : col + "px") + " "; });
                                    imageObject.style.gridTemplate = gridTemplate;
                                }
                            }
                            __webpack_require__.g.Coordinates = Properties.Coordinates;
                        }
                    ],
                    _m),
                _e.LeftClick = (_p = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e.LeftClickHoldingDown = (_r = /** @class */ (function () {
                        function LeftClickHoldingDown() {
                        }
                        return LeftClickHoldingDown;
                    }()),
                    _r.CurrentMethod = (_s = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _r.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _s.MethodIndex = 0,
                        _s.Response = true,
                        _s),
                    _r.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Down");
                            __webpack_require__.g.objectMovement = Identificator;
                            __webpack_require__.g.Doc.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Set(1);
                        }
                    ],
                    _r),
                _e.LeftClickHoldingUp = (_t = /** @class */ (function () {
                        function LeftClickHoldingUp() {
                        }
                        return LeftClickHoldingUp;
                    }()),
                    _t.CurrentMethod = (_u = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _t.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _u.MethodIndex = 0,
                        _u.Response = true,
                        _u),
                    _t.OtherMethods = [
                        function (Identificator, Properties) {
                            console.log("LeftClickHolding Up");
                            VerticalLine.Methods.InformationHandler.MouseHandler.Move.CurrentMethod.Response = false;
                            __webpack_require__.g.Coordinates = null;
                        }
                    ],
                    _t),
                _e),
            //#region Hidden
            _d.isListener = false,
            _d),
        _c);
    VerticalLine.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    VerticalLine.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return VerticalLine;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/CurrentMethodText/CurrentMethodText.tsx":
/*!*************************************************************************!*\
  !*** ./Data/Elements/Compounds/CurrentMethodText/CurrentMethodText.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CurrentMethodText": () => (/* binding */ CurrentMethodText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var CurrentMethodText = /** @class */ (function () {
    function CurrentMethodText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = CurrentMethodText.Form;
        this.Methods = CurrentMethodText.Methods;
        this.Elements = CurrentMethodText.Elements;
        this.References = CurrentMethodText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    CurrentMethodText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "CurrentMethod",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    CurrentMethodText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", CurrentMethodText.InstanceIdentificator);
                        object = CurrentMethodText.Form.Image.ApplyImage(object);
                        if (CurrentMethodText.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(CurrentMethodText.Form.Image.Text));
                        Object.values(CurrentMethodText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(CurrentMethodText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    CurrentMethodText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    CurrentMethodText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return CurrentMethodText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/CurrentMethod/CurrentMethod.tsx":
/*!*****************************************************************!*\
  !*** ./Data/Elements/Compounds/CurrentMethod/CurrentMethod.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CurrentMethod": () => (/* binding */ CurrentMethod)
/* harmony export */ });
/* harmony import */ var _Compounds_Compounds_Compounds_SpaceMethods_SpaceMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var CurrentMethod = /** @class */ (function () {
    function CurrentMethod() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = CurrentMethod.Form;
        this.Methods = CurrentMethod.Methods;
        this.Elements = CurrentMethod.Elements;
        this.References = CurrentMethod.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    CurrentMethod.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 3,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                padding: {
                    left: 15,
                    right: 10,
                    bottom: 15,
                    top: 10
                },
                backgroundColor: "#0b0c0d"
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    CurrentMethod.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", CurrentMethod.InstanceIdentificator);
                        object = CurrentMethod.Form.Image.ApplyImage(object);
                        if (CurrentMethod.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(CurrentMethod.Form.Image.Text));
                        Object.values(CurrentMethod.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    console.log("CurrentMethod");
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(CurrentMethod.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    CurrentMethod.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.SpaceMethods = _Compounds_Compounds_Compounds_SpaceMethods_SpaceMethods__WEBPACK_IMPORTED_MODULE_0__.SpaceMethods,
        _r);
    CurrentMethod.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return CurrentMethod;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/OtherMethodsText/OtherMethodsText.tsx":
/*!***********************************************************************!*\
  !*** ./Data/Elements/Compounds/OtherMethodsText/OtherMethodsText.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OtherMethodsText": () => (/* binding */ OtherMethodsText)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var OtherMethodsText = /** @class */ (function () {
    function OtherMethodsText() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OtherMethodsText.Form;
        this.Methods = OtherMethodsText.Methods;
        this.Elements = OtherMethodsText.Elements;
        this.References = OtherMethodsText.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    OtherMethodsText.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Text = "OtherMethods",
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OtherMethodsText.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OtherMethodsText.InstanceIdentificator);
                        object = OtherMethodsText.Form.Image.ApplyImage(object);
                        if (OtherMethodsText.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OtherMethodsText.Form.Image.Text));
                        Object.values(OtherMethodsText.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OtherMethodsText.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OtherMethodsText.Elements = /** @class */ (function () {
        function Elements() {
        }
        return Elements;
    }());
    OtherMethodsText.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OtherMethodsText;
}());



/***/ }),

/***/ "./Data/Elements/Compounds/OtherMethods/OtherMethods.tsx":
/*!***************************************************************!*\
  !*** ./Data/Elements/Compounds/OtherMethods/OtherMethods.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OtherMethods": () => (/* binding */ OtherMethods)
/* harmony export */ });
/* harmony import */ var _Compounds_Compounds_Compounds_SpaceMethods_SpaceMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods */ "./Data/Elements/Compounds/Compounds/Compounds/Compounds/SpaceMethods/SpaceMethods.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var OtherMethods = /** @class */ (function () {
    function OtherMethods() {
        //#region Hidden
        //#region ExtensionInterfaceLackInstanceReferenceOnStatic
        this.Image = OtherMethods.Form;
        this.Methods = OtherMethods.Methods;
        this.Elements = OtherMethods.Elements;
        this.References = OtherMethods.References;
        //#endregion
        //#endregion Hidden
    }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    OtherMethods.Form = (_a = /** @class */ (function () {
            function Form() {
            }
            return Form;
        }()),
        _a.Image = (_b = /** @class */ (function () {
                function Image() {
                }
                //#region Hidden
                Image.ApplyImage = function (element) {
                    var _a, _b, _c, _d, _e, _g, _j, _l, _o, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
                    if (((_a = Image.Border) === null || _a === void 0 ? void 0 : _a.Margin) != null) {
                        if (((_b = Image.Border.Margin) === null || _b === void 0 ? void 0 : _b.left) != null) {
                            var margin = Image.Border.Margin;
                            element.style.marginLeft = margin.left + "px";
                            element.style.marginRight = margin.right + "px";
                            element.style.marginBottom = margin.bottom + "px";
                            element.style.marginTop = margin.top + "px";
                        }
                        else
                            element.style.margin = Image.Border.Margin + "px";
                    }
                    if (((_c = Image.Border) === null || _c === void 0 ? void 0 : _c.width) != null)
                        element.style.width = (typeof Image.Border.width == "string" ? Image.Border.width : (((_d = Image.Border) === null || _d === void 0 ? void 0 : _d.width) + "px"));
                    if (((_e = Image.Border) === null || _e === void 0 ? void 0 : _e.minWidth) != null)
                        element.style.minWidth = (typeof Image.Border.minWidth == "string" ? Image.Border.minWidth : (((_g = Image.Border) === null || _g === void 0 ? void 0 : _g.minWidth) + "px"));
                    if (((_j = Image.Border) === null || _j === void 0 ? void 0 : _j.maxWidth) != null)
                        element.style.maxWidth = (typeof Image.Border.maxWidth == "string" ? Image.Border.maxWidth : (((_l = Image.Border) === null || _l === void 0 ? void 0 : _l.maxWidth) + "px"));
                    if (((_o = Image.Border) === null || _o === void 0 ? void 0 : _o.height) != null)
                        element.style.height = (typeof Image.Border.height == "string" ? Image.Border.height : (((_q = Image.Border) === null || _q === void 0 ? void 0 : _q.height) + "px"));
                    if (((_r = Image.Border) === null || _r === void 0 ? void 0 : _r.minHeight) != null)
                        element.style.minHeight = (typeof Image.Border.minHeight == "string" ? Image.Border.minHeight : (((_s = Image.Border) === null || _s === void 0 ? void 0 : _s.minHeight) + "px"));
                    if (((_t = Image.Border) === null || _t === void 0 ? void 0 : _t.maxHeight) != null)
                        element.style.maxHeight = (typeof Image.Border.maxHeight == "string" ? Image.Border.maxHeight : (((_u = Image.Border) === null || _u === void 0 ? void 0 : _u.maxHeight) + "px"));
                    if (((_v = Image.Border) === null || _v === void 0 ? void 0 : _v.borderWidth) != null) {
                        if (((_w = Image.Border.borderWidth) === null || _w === void 0 ? void 0 : _w.left) != null) {
                            var borderWidth = Image.Border.borderWidth;
                            element.style.borderLeftWidth = borderWidth.left + "px";
                            element.style.borderRightWidth = borderWidth.right + "px";
                            element.style.borderBottomWidth = borderWidth.bottom + "px";
                            element.style.borderTopWidth = borderWidth.top + "px";
                        }
                        else
                            element.style.borderWidth = Image.Border.borderWidth + "px";
                    }
                    if (((_x = Image.Border) === null || _x === void 0 ? void 0 : _x.borderType) != null)
                        element.style.borderStyle = Image.Border.borderType;
                    if (((_y = Image.Border) === null || _y === void 0 ? void 0 : _y.borderRadius) != null)
                        element.style.borderRadius = Image.Border.borderRadius + "px";
                    if (((_z = Image.Border) === null || _z === void 0 ? void 0 : _z.borderColor) != null)
                        element.style.borderColor = Image.Border.borderColor;
                    if (((_0 = Image.Border) === null || _0 === void 0 ? void 0 : _0.backgroundColor) != null)
                        element.style.backgroundColor = Image.Border.backgroundColor;
                    if (((_1 = Image.Border) === null || _1 === void 0 ? void 0 : _1.padding) != null) {
                        if (((_2 = Image.Border.padding) === null || _2 === void 0 ? void 0 : _2.left) != null) {
                            var padding = Image.Border.padding;
                            element.style.paddingLeft = padding.left + "px";
                            element.style.paddingRight = padding.right + "px";
                            element.style.paddingBottom = padding.bottom + "px";
                            element.style.paddingTop = padding.top + "px";
                        }
                        else
                            element.style.padding = Image.Border.padding + "px";
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Display) != null)
                        element.style.display = Image.Display;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplateColumns) != null)
                        element.style.gridTemplateColumns = Image.gridTemplateColumns;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridTemplate) != null)
                        element.style.gridTemplate = Image.gridTemplate;
                    if ((Image === null || Image === void 0 ? void 0 : Image.gridArea) != null) {
                        if (typeof Image.gridArea == "string") {
                            var st = Image.gridArea;
                            element.style.gridArea = st + "/" + st + "/" + st + "/" + st;
                        }
                        else
                            element.style.gridArea = Image.gridArea[0] + "/" + Image.gridArea[1];
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.position) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    if ((Image === null || Image === void 0 ? void 0 : Image.Positioning) != null) {
                        element.style.position = Image.position;
                        if ((Image === null || Image === void 0 ? void 0 : Image.positionOffset) != null) {
                            element.style.left = (typeof Image.positionOffset.left == "string" ? Image.positionOffset.left : (Image.positionOffset.left + "px"));
                            element.style.top = (typeof Image.positionOffset.top == "string" ? Image.positionOffset.top : (Image.positionOffset.top + "px"));
                        }
                    }
                    return element;
                };
                return Image;
            }()),
            _b.Border = {
                borderWidth: 3,
                borderType: "solid",
                borderColor: "hsl(0deg 0% 50%)",
                borderRadius: 10,
                backgroundColor: "#0b0c0d",
                padding: 10
            },
            _b.Positioning = {
                row: "start",
                column: "center"
            },
            _b),
        _a.States = [],
        _a.Dependencies = [],
        _a.StatesTimeInformation = [],
        _a);
    OtherMethods.Methods = (_c = /** @class */ (function () {
            function Methods() {
            }
            Methods.Create = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var object;
                    var _this = this;
                    return __generator(this, function (_a) {
                        object = document.createElement("div");
                        object.setAttribute("Identificator", __webpack_require__.g.count.toString());
                        object.setAttribute("InstanceIdentificator", OtherMethods.InstanceIdentificator);
                        object = OtherMethods.Form.Image.ApplyImage(object);
                        if (OtherMethods.Form.Image.Text != null)
                            object.appendChild(document.createTextNode(OtherMethods.Form.Image.Text));
                        Object.values(OtherMethods.Elements).forEach(function (childElement) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        __webpack_require__.g.count += 1;
                                        childElement.Identificator = __webpack_require__.g.count.toString();
                                        _b = (_a = object).appendChild;
                                        return [4 /*yield*/, childElement.Methods.Create()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        //#endregion ExtensionInterface
                        return [2 /*return*/, object];
                    });
                });
            };
            return Methods;
        }()),
        _c.InformationHandler = (_d = /** @class */ (function () {
                function InformationHandler() {
                }
                InformationHandler.Initialize = function (Information) {
                    InformationHandler[Information.ObjectReference].Initialize(Information);
                };
                //#region Hidden
                InformationHandler.ExtensionLackListeners = function () {
                    //document.body.addEventListener("Outline", function (event: CustomEvent) { InformationHandler.Initialize(event.detail) });
                    Object.values(OtherMethods.Elements).forEach(function (childElement) { return childElement.Methods.InformationHandler.ExtensionLackListeners(); });
                };
                return InformationHandler;
            }()),
            _d.MouseHandler = (_e = /** @class */ (function () {
                    function MouseHandler() {
                    }
                    MouseHandler.Initialize = function (Information) {
                        MouseHandler[Information.Method].CurrentMethod.Run(Information.Identificator, Information.Properties);
                    };
                    return MouseHandler;
                }()),
                _e.HoverIn = (_f = /** @class */ (function () {
                        function HoverIn() {
                        }
                        return HoverIn;
                    }()),
                    _f.CurrentMethod = (_g = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _f.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _g.MethodIndex = 0,
                        _g.Response = false,
                        _g),
                    _f.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _f),
                _e.HoverOut = (_h = /** @class */ (function () {
                        function HoverOut() {
                        }
                        return HoverOut;
                    }()),
                    _h.CurrentMethod = (_j = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _h.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _j.MethodIndex = 0,
                        _j.Response = false,
                        _j),
                    _h.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _h),
                _e.HoverOver = (_k = /** @class */ (function () {
                        function HoverOver() {
                        }
                        return HoverOver;
                    }()),
                    _k.CurrentMethod = (_l = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _k.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _l.MethodIndex = 0,
                        _l.Response = false,
                        _l),
                    _k.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _k),
                _e.LeftClick = (_m = /** @class */ (function () {
                        function LeftClick() {
                        }
                        return LeftClick;
                    }()),
                    _m.CurrentMethod = (_o = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _m.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _o.MethodIndex = 0,
                        _o.Response = false,
                        _o),
                    _m.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _m),
                _e.LeftClickHolding = (_p = /** @class */ (function () {
                        function LeftClickHolding() {
                        }
                        return LeftClickHolding;
                    }()),
                    _p.CurrentMethod = (_q = /** @class */ (function () {
                            function CurrentMethod() {
                            }
                            CurrentMethod.Run = function (Identificator, Properties) {
                                if (CurrentMethod.Response)
                                    _p.OtherMethods[CurrentMethod.MethodIndex](Identificator, Properties);
                            };
                            CurrentMethod.Set = function (MethodIndex) {
                                CurrentMethod.MethodIndex = MethodIndex;
                            };
                            return CurrentMethod;
                        }()),
                        _q.MethodIndex = 0,
                        _q.Response = false,
                        _q),
                    _p.OtherMethods = [
                    /* function (Identificator, Properties) {

                    } */
                    ],
                    _p),
                _e),
            _d),
        _c);
    OtherMethods.Elements = (_r = /** @class */ (function () {
            function Elements() {
            }
            return Elements;
        }()),
        _r.SpaceMethods = _Compounds_Compounds_Compounds_SpaceMethods_SpaceMethods__WEBPACK_IMPORTED_MODULE_0__.SpaceMethods,
        _r);
    OtherMethods.References = /** @class */ (function () {
        function References() {
        }
        return References;
    }());
    return OtherMethods;
}());



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./Data/Elements/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Compounds/Document/Document.tsx");
/******/ 	
/******/ })()
;